	DATA	noname+0(SB)/8,$.string<>+0(SB)
	DATA	symname+0(SB)/1,$95
	DATA	symname+1(SB)/1,$95
	DATA	symname+2(SB)/1,$46
	DATA	symname+3(SB)/1,$83
	DATA	symname+4(SB)/1,$89
	DATA	symname+5(SB)/1,$77
	DATA	symname+6(SB)/1,$68
	DATA	symname+7(SB)/1,$69
	DATA	symname+8(SB)/1,$70
	DATA	thechar+0(SB)/1,$54
	DATA	.string<>+0(SB)/8,$"<none>\za"
	DATA	thestring+0(SB)/8,$.string<>+7(SB)
	DATA	.string<>+8(SB)/8,$"md64\zFP\z"
	DATA	paramspace+0(SB)/8,$.string<>+13(SB)
	TEXT	isobjfile<>+0(SB),0,$72
	MOVL	$0,8(SP)
	CALL	,Bopen+0(SB)
	CMPQ	AX,$0
	JNE	,3(PC)
	MOVL	$0,AX
	RET	,
	MOVQ	AX,BP
	MOVQ	AX,b+-16(SP)
	LEAQ	buf1+-21(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$5,CX
	MOVL	CX,16(SP)
	CALL	,Bread+0(SB)
	CMPL	AX,$5
	JNE	,16(PC)
	MOVBLSX	buf1+-19(SP),AX
	CMPL	AX,$1
	JNE	,5(PC)
	MOVBLSX	buf1+-18(SP),AX
	CMPL	AX,$60
	JNE	,2(PC)
	JMP	,8(PC)
	MOVBLSX	buf1+-18(SP),AX
	CMPL	AX,$1
	JNE	,4(PC)
	MOVBLSX	buf1+-17(SP),AX
	CMPL	AX,$60
	JEQ	,2(PC)
	JMP	,2(PC)
	JMP	,2(PC)
	JMP	,3(PC)
	MOVL	$1,v+-8(SP)
	JMP	,26(PC)
	MOVQ	b+-16(SP),BP
	MOVQ	$0,8(SP)
	MOVL	$0,16(SP)
	CALL	,Bseek+0(SB)
	MOVQ	b+-16(SP),BP
	LEAQ	buf2+-29(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$8,CX
	MOVL	CX,16(SP)
	CALL	,Bread+0(SB)
	DATA	.string<>+16(SB)/8,$"!<arch>\n"
	CMPL	AX,$8
	JNE	,9(PC)
	LEAQ	buf2+-29(SP),BP
	MOVQ	$.string<>+16(SB),DX
	MOVQ	DX,8(SP)
	MOVL	$8,DX
	MOVL	DX,16(SP)
	CALL	,strncmp+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,3(PC)
	MOVL	$1,AX
	JMP	,2(PC)
	MOVL	$0,AX
	MOVL	AX,v+-8(SP)
	MOVQ	b+-16(SP),BP
	CALL	,Bterm+0(SB)
	MOVL	v+-8(SP),AX
	RET	,
	RET	,
	TEXT	main+0(SB),0,$104
	MOVL	BP,argc+0(FP)
	MOVQ	$bso+0(SB),BP
	MOVL	$1,AX
	MOVL	AX,8(SP)
	MOVL	$1,AX
	MOVL	AX,16(SP)
	CALL	,Binit+0(SB)
	MOVL	$-1,cout+0(SB)
	CALL	,listinit+0(SB)
	MOVQ	$debug+0(SB),BP
	MOVL	$0,8(SP)
	MOVL	$128,AX
	MOVL	AX,16(SP)
	CALL	,memset+0(SB)
	MOVQ	argv+8(FP),DX
	MOVL	$0,nerrors+0(SB)
	MOVQ	$.string<>+25(SB),AX
	MOVQ	AX,outfile+0(SB)
	MOVL	$-1,HEADTYPE+0(SB)
	MOVQ	$-1,INITTEXT+0(SB)
	MOVQ	$-1,INITDAT+0(SB)
	MOVL	$-1,INITRND+0(SB)
	MOVQ	$0,INITENTRY+0(SB)
	CMPQ	argv0+0(SB),$0
	JNE	,6(PC)
	MOVQ	(DX),AX
	MOVQ	AX,argv0+0(SB)
	CMPQ	AX,$0
	JNE	,2(PC)
	JMP	,1(PC)
	ADDQ	$8,DX
	DECL	,argc+0(FP)
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,297(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	(DX),AX
	CMPQ	AX,$0
	JEQ	,5(PC)
	MOVQ	(DX),AX
	MOVBLSX	(AX),AX
	CMPL	AX,$45
	JEQ	,2(PC)
	JMP	,5(PC)
	MOVQ	(DX),AX
	MOVBLSX	1(AX),AX
	CMPB	AX,$0
	JNE	,2(PC)
	JMP	,-15(PC)
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),BX
	INCQ	,BX
	MOVBLSX	(BX),AX
	CMPL	AX,$45
	JNE	,4(PC)
	MOVBLSX	1(BX),AX
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,4(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	JMP	,-28(PC)
	MOVW	$0,_argc+-34(SP)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,264(PC)
	MOVBLSX	(BX),AX
	CMPB	AX,$0
	JEQ	,12(PC)
	LEAQ	_argc+-34(SP),BP
	MOVQ	BX,_args+-24(SP)
	MOVQ	BX,8(SP)
	CALL	,chartorune+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	MOVLQSX	AX,AX
	ADDQ	AX,BX
	MOVQ	BX,_args+-24(SP)
	CMPQ	BX,$0
	JNE	,2(PC)
	JMP	,-15(PC)
	JMP	,227(PC)
	JMP	,246(PC)
	MOVWLZX	_argc+-34(SP),AX
	CMPL	AX,$0
	JLT	,3(PC)
	CMPL	AX,$128
	JLT	,2(PC)
	JMP	,3(PC)
	MOVLQSX	AX,AX
	ADDB	$1,debug+0(SB)(AX*1)
	JMP	,-9(PC)
	DATA	.string<>+24(SB)/8,$"\z6.out\z\z"
	MOVQ	BX,BP
	MOVQ	$.string<>+31(SB),BX
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	MOVQ	AX,outfile+0(SB)
	JMP	,-27(PC)
	MOVQ	BX,BP
	MOVQ	$.string<>+32(SB),BX
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	CMPQ	AX,$0
	JEQ	,2(PC)
	MOVQ	AX,INITENTRY+0(SB)
	JMP	,-47(PC)
	MOVQ	BX,BP
	MOVQ	$.string<>+33(SB),BX
	MOVQ	BX,_args+-24(SP)
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	MOVQ	AX,BP
	CALL	,atolwhex+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	MOVL	AX,HEADTYPE+0(SB)
	JMP	,-72(PC)
	MOVQ	BX,BP
	MOVQ	$.string<>+34(SB),BX
	MOVQ	BX,_args+-24(SP)
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	MOVQ	AX,BP
	CALL	,atolwhex+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	MOVQ	AX,INITTEXT+0(SB)
	JMP	,-97(PC)
	MOVQ	BX,BP
	MOVQ	$.string<>+35(SB),BX
	MOVQ	BX,_args+-24(SP)
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	MOVQ	AX,BP
	CALL	,atolwhex+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	MOVQ	AX,INITDAT+0(SB)
	JMP	,-122(PC)
	MOVQ	BX,BP
	MOVQ	$.string<>+36(SB),BX
	MOVQ	BX,_args+-24(SP)
	MOVBLSX	(BP),CX
	CMPB	CX,$0
	JEQ	,3(PC)
	MOVQ	BP,AX
	JMP	,10(PC)
	MOVQ	8(DX),CX
	CMPQ	CX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	JMP	,2(PC)
	MOVQ	$0,AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	MOVQ	AX,BP
	CALL	,atolwhex+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	MOVL	AX,INITRND+0(SB)
	JMP	,-147(PC)
	MOVL	$1,doexp+0(SB)
	MOVQ	8(DX),AX
	CMPQ	AX,$0
	JEQ	,5(PC)
	MOVQ	8(DX),AX
	MOVBLSX	(AX),AX
	CMPL	AX,$45
	JNE	,2(PC)
	JMP	,7(PC)
	MOVQ	8(DX),BP
	CALL	,isobjfile<>+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,22(PC)
	MOVQ	$.string<>+37(SB),AX
	MOVQ	AX,_args+-24(SP)
	MOVBLSX	(BX),AX
	CMPB	AX,$0
	JEQ	,3(PC)
	MOVQ	BX,BP
	JMP	,10(PC)
	MOVQ	8(DX),AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),BP
	JMP	,2(PC)
	MOVQ	$0,BP
	MOVL	$10,AX
	MOVL	AX,8(SP)
	CALL	,readundefs+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	JMP	,-185(PC)
	MOVL	$1,dlm+0(SB)
	ADDB	$1,debug+108(SB)
	MOVQ	8(DX),AX
	CMPQ	AX,$0
	JEQ	,5(PC)
	MOVQ	8(DX),AX
	MOVBLSX	(AX),AX
	CMPL	AX,$45
	JNE	,2(PC)
	JMP	,7(PC)
	MOVQ	8(DX),BP
	CALL	,isobjfile<>+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,22(PC)
	MOVQ	$.string<>+38(SB),AX
	MOVQ	AX,_args+-24(SP)
	MOVBLSX	(BX),AX
	CMPB	AX,$0
	JEQ	,3(PC)
	MOVQ	BX,BP
	JMP	,10(PC)
	MOVQ	8(DX),AX
	CMPQ	AX,$0
	JEQ	,6(PC)
	DECL	,argc+0(FP)
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),BP
	JMP	,2(PC)
	MOVQ	$0,BP
	MOVL	$9,AX
	MOVL	AX,8(SP)
	CALL	,readundefs+0(SB)
	MOVQ	_args+-24(SP),BX
	MOVQ	argv+8(FP),DX
	JMP	,-224(PC)
	JMP	,-225(PC)
	MOVWLZX	_argc+-34(SP),AX
	CMPL	AX,$84
	JGT	,11(PC)
	JEQ	,-156(PC)
	CMPL	AX,$68
	JEQ	,-133(PC)
	CMPL	AX,$69
	JEQ	,-205(PC)
	CMPL	AX,$72
	JEQ	,-187(PC)
	CMPL	AX,$82
	JEQ	,-114(PC)
	JMP	,-237(PC)
	CMPL	AX,$111
	JEQ	,-230(PC)
	CMPL	AX,$117
	JEQ	,-56(PC)
	CMPL	AX,$120
	JEQ	,-96(PC)
	JMP	,-244(PC)
	JMP	,-264(PC)
	JMP	,-297(PC)
	MOVQ	DX,argv+8(FP)
	MOVQ	(DX),AX
	CMPQ	AX,$0
	JNE	,4(PC)
	DATA	.string<>+32(SB)/8,$"\z\z\z\z\z\z\zu"
	DATA	.string<>+40(SB)/8,$"sage: 6l"
	DATA	.string<>+48(SB)/8,$" [-optio"
	DATA	.string<>+56(SB)/8,$"ns] obje"
	MOVQ	$.string<>+39(SB),BP
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	CMPB	debug+57(SB),$0
	JNE	,3(PC)
	CMPB	debug+85(SB),$0
	JEQ	,2(PC)
	JMP	,3(PC)
	CMPB	debug+66(SB),$0
	JEQ	,2(PC)
	JMP	,2(PC)
	MOVB	$1,debug+57(SB)
	CMPL	HEADTYPE+0(SB),$-1
	JNE	,7(PC)
	CMPB	debug+66(SB),$0
	JEQ	,2(PC)
	MOVL	$2,HEADTYPE+0(SB)
	CMPB	debug+57(SB),$0
	JEQ	,2(PC)
	MOVL	$2,HEADTYPE+0(SB)
	JMP	,32(PC)
	JMP	,37(PC)
	DATA	.string<>+64(SB)/8,$"cts\zunkn"
	DATA	.string<>+72(SB)/8,$"own -H o"
	MOVQ	$.string<>+68(SB),BP
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	$32,HEADR+0(SB)
	CMPQ	INITTEXT+0(SB),$-1
	JNE	,2(PC)
	MOVQ	$4128,INITTEXT+0(SB)
	CMPQ	INITDAT+0(SB),$-1
	JNE	,2(PC)
	MOVQ	$0,INITDAT+0(SB)
	CMPL	INITRND+0(SB),$-1
	JNE	,2(PC)
	MOVL	$4096,INITRND+0(SB)
	JMP	,-14(PC)
	MOVQ	$148,BP
	MOVL	$16,CX
	MOVL	CX,8(SP)
	CALL	,rnd+0(SB)
	MOVL	AX,HEADR+0(SB)
	CMPQ	INITTEXT+0(SB),$-1
	JNE	,2(PC)
	MOVQ	$-2146369536,INITTEXT+0(SB)
	CMPQ	INITDAT+0(SB),$-1
	JNE	,2(PC)
	MOVQ	$0,INITDAT+0(SB)
	CMPL	INITRND+0(SB),$-1
	JNE	,2(PC)
	MOVL	$4096,INITRND+0(SB)
	JMP	,-29(PC)
	JMP	,-30(PC)
	MOVL	HEADTYPE+0(SB),AX
	CMPL	AX,$2
	JEQ	,-29(PC)
	CMPL	AX,$5
	JEQ	,-20(PC)
	JMP	,-35(PC)
	CMPQ	INITDAT+0(SB),$0
	JEQ	,3(PC)
	CMPL	INITRND+0(SB),$0
	JNE	,2(PC)
	JMP	,7(PC)
	DATA	.string<>+80(SB)/8,$"ption\zwa"
	DATA	.string<>+88(SB)/8,$"rning: -"
	DATA	.string<>+96(SB)/8,$"D0x%llux"
	DATA	.string<>+104(SB)/8,$" is igno"
	DATA	.string<>+112(SB)/8,$"red beca"
	DATA	.string<>+120(SB)/8,$"use of -"
	DATA	.string<>+128(SB)/8,$"R0x%lux\n"
	MOVQ	$.string<>+86(SB),BP
	MOVQ	INITDAT+0(SB),AX
	MOVQ	AX,8(SP)
	MOVL	INITRND+0(SB),AX
	MOVL	AX,16(SP)
	CALL	,print+0(SB)
	CMPB	debug+118(SB),$0
	JEQ	,13(PC)
	DATA	.string<>+136(SB)/8,$"\zHEADER "
	DATA	.string<>+144(SB)/8,$"= -H%ld "
	DATA	.string<>+152(SB)/8,$"-T0x%llu"
	DATA	.string<>+160(SB)/8,$"x -D0x%l"
	DATA	.string<>+168(SB)/8,$"lux -R0x"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+137(SB),AX
	MOVQ	AX,8(SP)
	MOVL	HEADTYPE+0(SB),AX
	MOVL	AX,16(SP)
	MOVQ	INITTEXT+0(SB),AX
	MOVQ	AX,24(SP)
	MOVQ	INITDAT+0(SB),AX
	MOVQ	AX,32(SP)
	MOVL	INITRND+0(SB),AX
	MOVL	AX,40(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	MOVL	$1,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,28(PC)
	INCL	,DX
	MOVLQSX	DX,AX
	IMULQ	$40,AX
	CMPW	optab+0(SB)(AX*1),$0
	JEQ	,-5(PC)
	MOVLQSX	DX,CX
	IMULQ	$40,CX
	MOVWLSX	optab+0(SB)(CX*1),AX
	MOVL	AX,BX
	MOVLQSX	AX,AX
	CMPQ	opindex+0(SB)(AX*8),$0
	JEQ	,10(PC)
	DATA	.string<>+176(SB)/8,$"%lux\n\zph"
	DATA	.string<>+184(SB)/8,$"ase erro"
	DATA	.string<>+192(SB)/8,$"r in opt"
	DATA	.string<>+200(SB)/8,$"ab: %d ("
	MOVQ	$.string<>+182(SB),BP
	MOVL	DX,i+-4(SP)
	MOVL	DX,8(SP)
	MOVL	BX,c+-8(SP)
	MOVL	BX,16(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	c+-8(SP),BX
	MOVL	i+-4(SP),DX
	MOVLQSX	DX,CX
	IMULQ	$40,CX
	LEAQ	optab+0(SB)(CX*1),AX
	MOVLQSX	BX,CX
	MOVQ	AX,opindex+0(SB)(CX*8)
	JMP	,-28(PC)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,11(PC)
	INCL	,DX
	CMPL	DX,$65
	JGE	,-3(PC)
	MOVLQSX	DX,CX
	IMULQ	$65,CX
	LEAQ	ycover+0(SB)(CX*1),AX
	MOVLQSX	DX,CX
	ADDQ	CX,AX
	MOVB	$1,(AX)
	JMP	,-11(PC)
	MOVB	$1,ycover+134(SB)
	MOVB	$1,ycover+199(SB)
	MOVB	$1,ycover+135(SB)
	MOVB	$1,ycover+200(SB)
	MOVB	$1,ycover+265(SB)
	MOVB	$1,ycover+136(SB)
	MOVB	$1,ycover+201(SB)
	MOVB	$1,ycover+266(SB)
	MOVB	$1,ycover+331(SB)
	MOVB	$1,ycover+137(SB)
	MOVB	$1,ycover+202(SB)
	MOVB	$1,ycover+267(SB)
	MOVB	$1,ycover+332(SB)
	MOVB	$1,ycover+397(SB)
	MOVB	$1,ycover+598(SB)
	MOVB	$1,ycover+663(SB)
	MOVB	$1,ycover+728(SB)
	MOVB	$1,ycover+793(SB)
	MOVB	$1,ycover+1118(SB)
	MOVB	$1,ycover+923(SB)
	MOVB	$1,ycover+662(SB)
	MOVB	$1,ycover+732(SB)
	MOVB	$1,ycover+797(SB)
	MOVB	$1,ycover+729(SB)
	MOVB	$1,ycover+794(SB)
	MOVB	$1,ycover+1119(SB)
	MOVB	$1,ycover+1055(SB)
	MOVB	$1,ycover+603(SB)
	MOVB	$1,ycover+668(SB)
	MOVB	$1,ycover+733(SB)
	MOVB	$1,ycover+798(SB)
	MOVB	$1,ycover+1123(SB)
	MOVB	$1,ycover+863(SB)
	MOVB	$1,ycover+928(SB)
	MOVB	$1,ycover+1318(SB)
	MOVB	$1,ycover+734(SB)
	MOVB	$1,ycover+799(SB)
	MOVB	$1,ycover+1124(SB)
	MOVB	$1,ycover+929(SB)
	MOVB	$1,ycover+1319(SB)
	MOVB	$1,ycover+777(SB)
	MOVB	$1,ycover+842(SB)
	MOVB	$1,ycover+1167(SB)
	MOVB	$1,ycover+972(SB)
	MOVB	$1,ycover+1362(SB)
	MOVB	$1,ycover+4027(SB)
	MOVB	$1,ycover+779(SB)
	MOVB	$1,ycover+844(SB)
	MOVB	$1,ycover+1169(SB)
	MOVB	$1,ycover+974(SB)
	MOVB	$1,ycover+1364(SB)
	MOVB	$1,ycover+4159(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,96(PC)
	INCL	,DX
	CMPL	DX,$111
	JGE	,-3(PC)
	MOVLQSX	DX,AX
	MOVL	$-1,reg+0(SB)(AX*4)
	CMPL	DX,$0
	JLT	,3(PC)
	CMPL	DX,$15
	JLE	,2(PC)
	JMP	,19(PC)
	MOVL	DX,AX
	ANDL	$7,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$4
	JLT	,3(PC)
	CMPL	DX,$7
	JLE	,2(PC)
	JMP	,3(PC)
	MOVLQSX	DX,AX
	MOVL	$64,regrex+0(SB)(AX*4)
	CMPL	DX,$8
	JLT	,3(PC)
	CMPL	DX,$15
	JLE	,2(PC)
	JMP	,3(PC)
	MOVLQSX	DX,AX
	MOVL	$7,regrex+0(SB)(AX*4)
	CMPL	DX,$32
	JLT	,3(PC)
	CMPL	DX,$35
	JLE	,2(PC)
	JMP	,7(PC)
	MOVL	DX,AX
	ADDL	$-32,AX
	ANDL	$7,AX
	ADDL	$4,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$16
	JLT	,3(PC)
	CMPL	DX,$31
	JLE	,2(PC)
	JMP	,10(PC)
	MOVL	DX,AX
	ADDL	$-16,AX
	ANDL	$7,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$24
	JLT	,3(PC)
	MOVLQSX	DX,AX
	MOVL	$7,regrex+0(SB)(AX*4)
	CMPL	DX,$36
	JLT	,3(PC)
	CMPL	DX,$43
	JLE	,2(PC)
	JMP	,6(PC)
	MOVL	DX,AX
	ADDL	$-36,AX
	ANDL	$7,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$44
	JLT	,3(PC)
	CMPL	DX,$51
	JLE	,2(PC)
	JMP	,6(PC)
	MOVL	DX,AX
	ADDL	$-44,AX
	ANDL	$7,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$52
	JLT	,3(PC)
	CMPL	DX,$67
	JLE	,2(PC)
	JMP	,10(PC)
	MOVL	DX,AX
	ADDL	$-52,AX
	ANDL	$7,AX
	MOVLQSX	DX,CX
	MOVL	AX,reg+0(SB)(CX*4)
	CMPL	DX,$60
	JLT	,3(PC)
	MOVLQSX	DX,AX
	MOVL	$7,regrex+0(SB)(AX*4)
	CMPL	DX,$87
	JLT	,3(PC)
	CMPL	DX,$94
	JLE	,2(PC)
	JMP	,3(PC)
	MOVLQSX	DX,AX
	MOVL	$4,regrex+0(SB)(AX*4)
	JMP	,-96(PC)
	MOVQ	$0,zprg+56(SB)
	MOVQ	$0,zprg+64(SB)
	MOVB	$2,zprg+85(SB)
	MOVW	$55,zprg+86(SB)
	MOVW	$111,zprg+16(SB)
	MOVB	$111,zprg+18(SB)
	MOVB	$1,zprg+19(SB)
	LEAQ	zprg+24(SB),CX
	LEAQ	zprg+0(SB),DX
	MOVQ	(DX),AX
	MOVQ	AX,(CX)
	MOVQ	8(DX),AX
	MOVQ	AX,8(CX)
	MOVQ	16(DX),AX
	MOVQ	AX,16(CX)
	MOVB	$64,zprg+89(SB)
	DATA	.string<>+208(SB)/8,$"%A)\z%.6l"
	MOVQ	$.string<>+212(SB),AX
	MOVQ	AX,pcstr+0(SB)
	CALL	,nuxiinit+0(SB)
	MOVL	$0,histgen+0(SB)
	MOVQ	$0,textp+0(SB)
	MOVQ	$0,datap+0(SB)
	MOVQ	$0,edatap+0(SB)
	MOVQ	$0,pc+0(SB)
	MOVL	$4,dtype+0(SB)
	MOVQ	outfile+0(SB),BP
	MOVL	$1,CX
	MOVL	CX,8(SP)
	MOVL	$509,CX
	MOVL	CX,16(SP)
	CALL	,create+0(SB)
	CMPL	AX,$0
	MOVL	AX,cout+0(SB)
	JGE	,6(PC)
	DATA	.string<>+216(SB)/8,$"lux \zcan"
	DATA	.string<>+224(SB)/8,$"not crea"
	MOVQ	$.string<>+221(SB),BP
	MOVQ	outfile+0(SB),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	$0,version+0(SB)
	MOVQ	$buf+0(SB),AX
	MOVQ	AX,cbp+0(SB)
	MOVL	$8192,cbc+0(SB)
	CALL	,prg+0(SB)
	MOVQ	argv+8(FP),DX
	MOVQ	INITENTRY+0(SB),CX
	MOVQ	AX,firstp+0(SB)
	MOVQ	firstp+0(SB),AX
	MOVQ	AX,lastp+0(SB)
	CMPQ	CX,$0
	JNE	,15(PC)
	DATA	.string<>+232(SB)/8,$"te %s\z_m"
	MOVQ	$.string<>+238(SB),CX
	MOVQ	CX,INITENTRY+0(SB)
	CMPB	debug+112(SB),$0
	JEQ	,3(PC)
	DATA	.string<>+240(SB)/8,$"ain\z_mai"
	MOVQ	$.string<>+244(SB),CX
	MOVQ	CX,INITENTRY+0(SB)
	CMPB	debug+108(SB),$0
	JNE	,6(PC)
	MOVQ	CX,BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	argv+8(FP),DX
	MOVW	$5,8(AX)
	JMP	,13(PC)
	MOVBLSX	(CX),AX
	CMPL	AX,$48
	JLT	,5(PC)
	MOVBLSX	(CX),AX
	CMPL	AX,$57
	JGT	,2(PC)
	JMP	,6(PC)
	MOVQ	CX,BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	argv+8(FP),DX
	MOVW	$5,8(AX)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,11(PC)
	MOVQ	(DX),AX
	CMPQ	AX,$0
	JEQ	,-3(PC)
	MOVQ	DX,BP
	ADDQ	$8,DX
	MOVQ	DX,argv+8(FP)
	MOVQ	(BP),BP
	CALL	,objfile+0(SB)
	MOVQ	argv+8(FP),DX
	JMP	,-11(PC)
	CMPB	debug+108(SB),$0
	JNE	,2(PC)
	CALL	,loadlib+0(SB)
	MOVQ	firstp+0(SB),AX
	MOVQ	56(AX),AX
	CMPQ	AX,$0
	MOVQ	AX,firstp+0(SB)
	JNE	,2(PC)
	CALL	,errorexit+0(SB)
	CMPL	doexp+0(SB),$0
	JNE	,4(PC)
	CMPL	dlm+0(SB),$0
	JNE	,2(PC)
	JMP	,20(PC)
	DATA	.string<>+248(SB)/8,$"np\z_expo"
	MOVQ	$.string<>+251(SB),BP
	MOVQ	BP,EXPTAB+0(SB)
	CALL	,zerosig+0(SB)
	DATA	.string<>+256(SB)/8,$"rttab\zet"
	MOVQ	$.string<>+262(SB),BP
	CALL	,zerosig+0(SB)
	DATA	.string<>+264(SB)/8,$"ext\zedat"
	MOVQ	$.string<>+268(SB),BP
	CALL	,zerosig+0(SB)
	MOVQ	$.string<>+274(SB),BP
	CALL	,zerosig+0(SB)
	CMPL	dlm+0(SB),$0
	JEQ	,8(PC)
	CALL	,import+0(SB)
	MOVL	$2,HEADTYPE+0(SB)
	MOVQ	$0,INITTEXT+0(SB)
	MOVQ	$0,INITDAT+0(SB)
	MOVL	$8,INITRND+0(SB)
	MOVQ	EXPTAB+0(SB),AX
	MOVQ	AX,INITENTRY+0(SB)
	CALL	,export+0(SB)
	CALL	,patch+0(SB)
	CALL	,follow+0(SB)
	CALL	,dodata+0(SB)
	CALL	,dostkoff+0(SB)
	DATA	.string<>+272(SB)/8,$"a\zend\zSP"
	MOVQ	$.string<>+278(SB),AX
	MOVQ	AX,paramspace+0(SB)
	CMPB	debug+112(SB),$0
	JEQ	,6(PC)
	CMPB	debug+49(SB),$0
	JEQ	,3(PC)
	CALL	,doprof1+0(SB)
	JMP	,2(PC)
	CALL	,doprof2+0(SB)
	CALL	,span+0(SB)
	CALL	,doinit+0(SB)
	CALL	,asmb+0(SB)
	CALL	,undef+0(SB)
	CMPB	debug+118(SB),$0
	JEQ	,33(PC)
	DATA	.string<>+280(SB)/8,$"\z%5.2f c"
	DATA	.string<>+288(SB)/8,$"pu time\n"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-56(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+281(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-56(SP),X0
	MOVSD	X0,16(SP)
	CALL	,Bprint+0(SB)
	DATA	.string<>+296(SB)/8,$"\z%ld sym"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+297(SB),AX
	MOVQ	AX,8(SP)
	MOVL	nsymbol+0(SB),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	DATA	.string<>+304(SB)/8,$"bols\n\z%l"
	DATA	.string<>+312(SB)/8,$"d memory"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+310(SB),AX
	MOVQ	AX,8(SP)
	MOVL	thunk+0(SB),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	DATA	.string<>+320(SB)/8,$" used\n\z%"
	DATA	.string<>+328(SB)/8,$"d sizeof"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+327(SB),AX
	MOVQ	AX,8(SP)
	MOVL	$24,AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	DATA	.string<>+336(SB)/8,$" adr\n\z%d"
	DATA	.string<>+344(SB)/8,$" sizeof "
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+342(SB),AX
	MOVQ	AX,8(SP)
	MOVL	$96,AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	CALL	,errorexit+0(SB)
	RET	,
	TEXT	loadlib+0(SB),0,$80
	JMP	,1(PC)
	MOVL	$0,xrefresolv+0(SB)
	MOVL	$0,CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,28(PC)
	INCL	,CX
	MOVL	CX,i+-4(SP)
	CMPL	CX,libraryp+0(SB)
	JGE	,-4(PC)
	CMPB	debug+118(SB),$0
	JEQ	,17(PC)
	DATA	.string<>+352(SB)/8,$"prog\n\z%5"
	DATA	.string<>+360(SB)/8,$".2f auto"
	DATA	.string<>+368(SB)/8,$"lib: %s "
	DATA	.string<>+376(SB)/8,$"(from %s"
	CALL	,cputime+0(SB)
	MOVL	i+-4(SP),DX
	MOVSD	X0,.safe+-32(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+358(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-32(SP),X0
	MOVSD	X0,16(SP)
	MOVLQSX	DX,CX
	MOVQ	library+0(SB)(CX*8),AX
	MOVQ	AX,24(SP)
	MOVLQSX	DX,CX
	MOVQ	libraryobj+0(SB)(CX*8),AX
	MOVQ	AX,32(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),CX
	MOVLQSX	CX,AX
	MOVQ	library+0(SB)(AX*8),BP
	CALL	,objfile+0(SB)
	MOVL	i+-4(SP),CX
	JMP	,-28(PC)
	CMPL	xrefresolv+0(SB),$0
	JEQ	,22(PC)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,18(PC)
	INCL	,DX
	CMPL	DX,$10007
	JGE	,-3(PC)
	MOVLQSX	DX,CX
	MOVQ	hash+0(SB)(CX*8),CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,9(PC)
	MOVQ	40(CX),CX
	CMPQ	CX,$0
	JEQ	,-3(PC)
	MOVWLSX	8(CX),AX
	CMPL	AX,$5
	JNE	,2(PC)
	JMP	,-53(PC)
	JMP	,-9(PC)
	JMP	,-18(PC)
	RET	,
	TEXT	errorexit+0(SB),0,$16
	CMPL	nerrors+0(SB),$0
	JEQ	,7(PC)
	CMPL	cout+0(SB),$0
	JLT	,3(PC)
	MOVQ	outfile+0(SB),BP
	CALL	,remove+0(SB)
	DATA	.string<>+384(SB)/8,$")\n\zerror"
	MOVQ	$.string<>+387(SB),BP
	CALL	,exits+0(SB)
	MOVQ	$0,BP
	CALL	,exits+0(SB)
	RET	,
	TEXT	objfile+0(SB),0,$440
	MOVQ	BP,file+0(FP)
	MOVBLSX	(BP),AX
	CMPL	AX,$45
	JNE	,4(PC)
	MOVBLSX	1(BP),AX
	CMPL	AX,$108
	JEQ	,2(PC)
	JMP	,27(PC)
	CMPB	debug+57(SB),$0
	JEQ	,8(PC)
	DATA	.string<>+392(SB)/8,$"\z/%s/lib"
	LEAQ	name+-140(SP),BP
	MOVQ	$.string<>+393(SB),AX
	MOVQ	AX,8(SP)
	MOVQ	thestring+0(SB),AX
	MOVQ	AX,16(SP)
	CALL	,sprint+0(SB)
	JMP	,7(PC)
	DATA	.string<>+400(SB)/8,$"/lib\z/us"
	DATA	.string<>+408(SB)/8,$"r/%clib/"
	LEAQ	name+-140(SP),BP
	MOVQ	$.string<>+405(SB),AX
	MOVQ	AX,8(SP)
	MOVBLSX	thechar+0(SB),AX
	MOVL	AX,16(SP)
	CALL	,sprint+0(SB)
	LEAQ	name+-140(SP),BP
	MOVQ	file+0(FP),AX
	ADDQ	$2,AX
	MOVQ	AX,8(SP)
	CALL	,strcat+0(SB)
	LEAQ	name+-140(SP),BP
	MOVQ	$.string<>+420(SB),AX
	MOVQ	AX,8(SP)
	CALL	,strcat+0(SB)
	LEAQ	name+-140(SP),AX
	MOVQ	AX,file+0(FP)
	CMPB	debug+118(SB),$0
	JEQ	,11(PC)
	DATA	.string<>+416(SB)/8,$"lib\z.a\z%"
	DATA	.string<>+424(SB)/8,$"5.2f ldo"
	DATA	.string<>+432(SB)/8,$"bj: %s\n\z"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-400(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+423(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-400(SP),X0
	MOVSD	X0,16(SP)
	MOVQ	file+0(FP),AX
	MOVQ	AX,24(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	MOVQ	file+0(FP),BP
	MOVL	$0,8(SP)
	CALL	,open+0(SB)
	MOVL	AX,CX
	CMPL	AX,$0
	MOVL	AX,f+-20(SP)
	JGE	,7(PC)
	DATA	.string<>+440(SB)/8,$"cannot o"
	DATA	.string<>+448(SB)/8,$"pen file"
	MOVQ	$.string<>+440(SB),BP
	MOVQ	file+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	f+-20(SP),CX
	MOVL	CX,BP
	LEAQ	magbuf+-40(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$8,CX
	MOVL	CX,16(SP)
	CALL	,read+0(SB)
	DATA	.string<>+456(SB)/8,$": %s\z!<a"
	CMPL	AX,$8
	JNE	,10(PC)
	LEAQ	magbuf+-40(SP),BP
	MOVQ	$.string<>+461(SB),CX
	MOVQ	CX,8(SP)
	MOVL	$8,CX
	MOVL	CX,16(SP)
	CALL	,strncmp+0(SB)
	CMPL	AX,$0
	JNE	,2(PC)
	JMP	,20(PC)
	MOVL	f+-20(SP),BP
	MOVQ	$0,8(SP)
	MOVL	$2,CX
	MOVL	CX,16(SP)
	CALL	,seek+0(SB)
	MOVL	AX,l+-16(SP)
	MOVL	f+-20(SP),BP
	MOVQ	$0,8(SP)
	MOVL	$0,16(SP)
	CALL	,seek+0(SB)
	MOVL	f+-20(SP),BP
	MOVL	l+-16(SP),AX
	MOVL	AX,8(SP)
	MOVQ	file+0(FP),AX
	MOVQ	AX,16(SP)
	CALL	,ldobj+0(SB)
	MOVL	f+-20(SP),BP
	CALL	,close+0(SB)
	RET	,
	MOVL	f+-20(SP),BP
	LEAQ	arhdr+-360(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$60,CX
	MOVL	CX,16(SP)
	CALL	,read+0(SB)
	CMPL	AX,$60
	JEQ	,6(PC)
	DATA	.string<>+464(SB)/8,$"rch>\n\z%s"
	DATA	.string<>+472(SB)/8,$": short "
	DATA	.string<>+480(SB)/8,$"read on "
	DATA	.string<>+488(SB)/8,$"archive "
	DATA	.string<>+496(SB)/8,$"file sym"
	DATA	.string<>+504(SB)/8,$"bol head"
	MOVQ	$.string<>+470(SB),BP
	MOVQ	file+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	JMP	,16(PC)
	MOVQ	$symname+0(SB),BP
	CALL	,strlen+0(SB)
	MOVL	AX,.safe+-396(SP)
	LEAQ	arhdr+-360(SP),BP
	MOVQ	$symname+0(SB),CX
	MOVQ	CX,8(SP)
	MOVL	.safe+-396(SP),CX
	MOVL	CX,16(SP)
	CALL	,strncmp+0(SB)
	CMPL	AX,$0
	JEQ	,6(PC)
	DATA	.string<>+512(SB)/8,$"er\z%s: f"
	DATA	.string<>+520(SB)/8,$"irst ent"
	DATA	.string<>+528(SB)/8,$"ry not s"
	DATA	.string<>+536(SB)/8,$"ymbol he"
	MOVQ	$.string<>+515(SB),BP
	MOVQ	file+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	JMP	,170(PC)
	LEAQ	arhdr+-312(SP),BP
	CALL	,atolwhex+0(SB)
	ADDQ	$68,AX
	MOVL	AX,esym+-8(SP)
	MOVL	$68,CX
	MOVL	f+-20(SP),BP
	MOVLQSX	CX,AX
	MOVL	CX,off+-4(SP)
	MOVQ	AX,8(SP)
	MOVL	$0,16(SP)
	CALL	,seek+0(SB)
	MOVL	esym+-8(SP),BP
	SUBL	off+-4(SP),BP
	MOVL	BP,cnt+-12(SP)
	ADDL	$10,BP
	CALL	,malloc+0(SB)
	MOVL	f+-20(SP),BP
	MOVQ	AX,start+-376(SP)
	MOVQ	AX,8(SP)
	MOVL	cnt+-12(SP),CX
	MOVL	CX,16(SP)
	CALL	,read+0(SB)
	CMPL	AX,$0
	JGT	,4(PC)
	MOVL	f+-20(SP),BP
	CALL	,close+0(SB)
	RET	,
	MOVLQSX	AX,CX
	MOVQ	start+-376(SP),DX
	LEAQ	(DX)(CX*1),AX
	MOVQ	AX,BP
	MOVQ	AX,stop+-384(SP)
	MOVL	$0,8(SP)
	MOVL	$10,AX
	MOVL	AX,16(SP)
	CALL	,memset+0(SB)
	MOVL	$1,work+-24(SP)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,124(PC)
	CMPL	work+-24(SP),$0
	JEQ	,-2(PC)
	CMPB	debug+118(SB),$0
	JEQ	,11(PC)
	DATA	.string<>+544(SB)/8,$"ader\z%5."
	DATA	.string<>+552(SB)/8,$"2f libra"
	DATA	.string<>+560(SB)/8,$"ry pass:"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-400(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+549(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-400(SP),X0
	MOVSD	X0,16(SP)
	MOVQ	file+0(FP),AX
	MOVQ	AX,24(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	MOVL	$0,work+-24(SP)
	MOVQ	start+-376(SP),CX
	JMP	,9(PC)
	JMP	,2(PC)
	JMP	,102(PC)
	MOVQ	e+-368(SP),BP
	ADDQ	$5,BP
	MOVL	$0,8(SP)
	CALL	,strchr+0(SB)
	INCQ	,AX
	MOVQ	AX,CX
	CMPQ	CX,stop+-384(SP)
	JCC	,-8(PC)
	MOVQ	CX,BP
	MOVQ	CX,e+-368(SP)
	ADDQ	$5,BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	AX,CX
	MOVWLSX	8(AX),AX
	CMPL	AX,$5
	JEQ	,2(PC)
	JMP	,-19(PC)
	DATA	.string<>+568(SB)/8,$" %s\n\z%s("
	LEAQ	pname+-290(SP),BP
	MOVQ	$.string<>+573(SB),AX
	MOVQ	AX,8(SP)
	MOVQ	file+0(FP),AX
	MOVQ	AX,16(SP)
	MOVQ	CX,s+-32(SP)
	MOVQ	(CX),AX
	MOVQ	AX,24(SP)
	CALL	,sprint+0(SB)
	CMPB	debug+118(SB),$0
	JEQ	,11(PC)
	DATA	.string<>+576(SB)/8,$"%s)\z%5.2"
	DATA	.string<>+584(SB)/8,$"f librar"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-400(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+580(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-400(SP),X0
	MOVSD	X0,16(SP)
	LEAQ	pname+-290(SP),AX
	MOVQ	AX,24(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	MOVQ	e+-368(SP),DX
	MOVBLSX	1(DX),AX
	ANDL	$255,AX
	MOVL	AX,CX
	MOVBLSX	2(DX),AX
	ANDL	$255,AX
	SALL	$8,AX
	ORL	AX,CX
	MOVBLSX	3(DX),AX
	ANDL	$255,AX
	SALL	$16,AX
	ORL	AX,CX
	MOVBLSX	4(DX),AX
	ANDL	$255,AX
	SALL	$24,AX
	ORL	AX,CX
	MOVL	f+-20(SP),BP
	MOVLQSX	CX,AX
	MOVQ	AX,8(SP)
	MOVL	$0,16(SP)
	CALL	,seek+0(SB)
	MOVL	f+-20(SP),BP
	LEAQ	arhdr+-360(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$60,CX
	MOVL	CX,16(SP)
	CALL	,read+0(SB)
	CMPL	AX,$60
	JEQ	,2(PC)
	JMP	,9(PC)
	DATA	.string<>+592(SB)/8,$"y: %s\n\z`"
	LEAQ	arhdr+-302(SP),BP
	MOVQ	$.string<>+599(SB),CX
	MOVQ	CX,8(SP)
	MOVL	$2,CX
	MOVL	CX,16(SP)
	CALL	,strncmp+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,24(PC)
	LEAQ	arhdr+-312(SP),BP
	CALL	,atolwhex+0(SB)
	MOVL	f+-20(SP),BP
	MOVL	AX,8(SP)
	LEAQ	pname+-290(SP),AX
	MOVQ	AX,16(SP)
	CALL	,ldobj+0(SB)
	MOVQ	s+-32(SP),CX
	MOVWLSX	8(CX),AX
	CMPL	AX,$5
	JNE	,8(PC)
	DATA	.string<>+600(SB)/8,$"\n\z%s: fa"
	DATA	.string<>+608(SB)/8,$"iled to "
	DATA	.string<>+616(SB)/8,$"load: %s"
	MOVQ	$.string<>+602(SB),BP
	MOVQ	file+0(FP),AX
	MOVQ	AX,8(SP)
	MOVQ	(CX),AX
	MOVQ	AX,16(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	$1,work+-24(SP)
	MOVL	$1,xrefresolv+0(SB)
	JMP	,-102(PC)
	JMP	,-124(PC)
	RET	,
	JMP	,1(PC)
	DATA	.string<>+624(SB)/8,$"\z%s: bad"
	DATA	.string<>+632(SB)/8,$" or out "
	DATA	.string<>+640(SB)/8,$"of date "
	DATA	.string<>+648(SB)/8,$"archive\z"
	MOVQ	$.string<>+625(SB),BP
	MOVQ	file+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	JMP	,1(PC)
	MOVL	f+-20(SP),BP
	CALL	,close+0(SB)
	RET	,
	TEXT	zaddr+0(SB),0,$40
	MOVQ	a+8(FP),DI
	MOVQ	BP,SI
	MOVBLZX	(BP),AX
	MOVL	AX,R8
	MOVL	$1,BP
	MOVL	BP,c+-4(SP)
	ANDL	$2,AX
	CMPL	AX,$0
	JEQ	,11(PC)
	MOVLQSX	BP,DX
	MOVBLSX	(SI)(DX*1),CX
	MOVB	CX,18(DI)
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLSX	1(CX),CX
	MOVB	CX,19(DI)
	ADDL	$2,BP
	MOVL	BP,c+-4(SP)
	JMP	,3(PC)
	MOVB	$111,18(DI)
	MOVB	$0,19(DI)
	MOVQ	$0,(DI)
	MOVL	R8,AX
	ANDL	$4,AX
	CMPL	AX,$0
	JEQ	,54(PC)
	MOVLQSX	BP,CX
	LEAQ	(SI)(CX*1),AX
	MOVBLZX	1(AX),AX
	SALL	$8,AX
	MOVLQSX	BP,DX
	MOVBLZX	(SI)(DX*1),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	2(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	3(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVLQSX	AX,CX
	MOVQ	CX,(DI)
	ADDL	$4,BP
	MOVL	BP,c+-4(SP)
	MOVL	R8,AX
	ANDL	$64,AX
	CMPL	AX,$0
	JEQ	,28(PC)
	MOVLQSX	BP,CX
	LEAQ	(SI)(CX*1),AX
	MOVBLZX	1(AX),AX
	SALL	$8,AX
	MOVLQSX	BP,DX
	MOVBLZX	(SI)(DX*1),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	2(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	3(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVLQSX	AX,AX
	SALQ	$32,AX
	MOVQ	(DI),CX
	MOVQ	$4294967295,DX
	ANDQ	DX,CX
	ORQ	CX,AX
	MOVQ	AX,(DI)
	ADDL	$4,BP
	MOVL	BP,c+-4(SP)
	MOVQ	$0,8(DI)
	MOVL	R8,AX
	ANDL	$16,AX
	CMPL	AX,$0
	JEQ	,9(PC)
	MOVLQSX	BP,CX
	MOVBQZX	(SI)(CX*1),AX
	MOVQ	h+16(FP),DX
	LEAQ	(DX)(AX*8),AX
	MOVQ	(AX),AX
	MOVQ	AX,8(DI)
	INCL	,BP
	MOVL	BP,c+-4(SP)
	MOVW	$111,16(DI)
	MOVL	R8,AX
	ANDL	$8,AX
	CMPL	AX,$0
	JEQ	,44(PC)
	MOVLQSX	BP,CX
	LEAQ	(SI)(CX*1),AX
	MOVBLZX	1(AX),AX
	SALL	$8,AX
	MOVLQSX	BP,DX
	MOVBLZX	(SI)(DX*1),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	2(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	3(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVL	AX,(DI)
	MOVLQSX	BP,CX
	LEAQ	(SI)(CX*1),AX
	MOVBLZX	5(AX),AX
	SALL	$8,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	4(CX),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	6(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVLQSX	BP,DX
	LEAQ	(SI)(DX*1),CX
	MOVBLZX	7(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVL	AX,4(DI)
	ADDL	$8,BP
	MOVL	BP,c+-4(SP)
	MOVW	$118,16(DI)
	JMP	,23(PC)
	MOVL	R8,AX
	ANDL	$32,AX
	CMPL	AX,$0
	JEQ	,19(PC)
	MOVL	$0,BX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,12(PC)
	INCL	,BX
	CMPL	BX,$8
	JGE	,-3(PC)
	MOVLQSX	BX,CX
	LEAQ	(SI)(CX*1),AX
	MOVLQSX	BP,CX
	ADDQ	CX,AX
	MOVBLSX	(AX),AX
	MOVLQSX	BX,CX
	MOVB	AX,(DI)(CX*1)
	JMP	,-12(PC)
	ADDL	$8,BP
	MOVL	BP,c+-4(SP)
	MOVW	$119,16(DI)
	MOVL	R8,AX
	ANDL	$1,AX
	CMPL	AX,$0
	JEQ	,6(PC)
	MOVLQSX	BP,DX
	MOVBLZX	(SI)(DX*1),CX
	MOVW	CX,16(DI)
	INCL	,BP
	MOVL	BP,c+-4(SP)
	MOVQ	8(DI),SI
	CMPQ	SI,$0
	MOVQ	SI,s+-24(SP)
	JNE	,3(PC)
	MOVL	BP,AX
	RET	,
	MOVWLSX	16(DI),AX
	MOVL	AX,BX
	CMPL	AX,$115
	MOVL	AX,t+-8(SP)
	JEQ	,3(PC)
	CMPL	BX,$116
	JNE	,2(PC)
	JMP	,3(PC)
	MOVL	BP,AX
	RET	,
	MOVQ	(DI),AX
	MOVL	AX,l+-16(SP)
	MOVQ	curauto+0(SB),CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,19(PC)
	MOVQ	8(CX),CX
	CMPQ	CX,$0
	JEQ	,-3(PC)
	MOVQ	(CX),AX
	CMPQ	AX,SI
	JNE	,12(PC)
	MOVWLSX	20(CX),AX
	CMPL	AX,BX
	JNE	,9(PC)
	MOVL	16(CX),AX
	CMPL	AX,l+-16(SP)
	JLE	,4(PC)
	MOVQ	CX,AX
	MOVL	l+-16(SP),CX
	MOVL	CX,16(AX)
	MOVL	BP,AX
	RET	,
	JMP	,-19(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,8(PC)
	CMPL	nhunk+0(SB),$24
	JGE	,-2(PC)
	CALL	,gethunk+0(SB)
	MOVQ	s+-24(SP),SI
	MOVL	t+-8(SP),BX
	MOVL	c+-4(SP),BP
	JMP	,-8(PC)
	MOVQ	hunk+0(SB),DX
	SUBL	$24,nhunk+0(SB)
	ADDQ	$24,hunk+0(SB)
	MOVQ	curauto+0(SB),CX
	MOVQ	CX,8(DX)
	MOVQ	DX,curauto+0(SB)
	MOVQ	SI,(DX)
	MOVL	l+-16(SP),CX
	MOVL	CX,16(DX)
	MOVW	BX,20(DX)
	MOVL	BP,AX
	RET	,
	RET	,
	TEXT	addlib+0(SB),0,$1352
	MOVQ	BP,obj+0(FP)
	CMPL	histfrogp+0(SB),$0
	JGT	,2(PC)
	RET	,
	MOVQ	histfrog+0(SB),AX
	MOVQ	(AX),AX
	MOVBLSX	1(AX),AX
	CMPL	AX,$47
	JNE	,7(PC)
	LEAQ	name+-1024(SP),BP
	MOVQ	$.string<>+656(SB),AX
	MOVQ	AX,8(SP)
	CALL	,sprint+0(SB)
	MOVL	$1,DX
	JMP	,28(PC)
	MOVQ	histfrog+0(SB),AX
	MOVQ	(AX),AX
	MOVBLSX	1(AX),AX
	CMPL	AX,$46
	JNE	,7(PC)
	LEAQ	name+-1024(SP),BP
	MOVQ	$.string<>+657(SB),AX
	MOVQ	AX,8(SP)
	CALL	,sprint+0(SB)
	MOVL	$0,DX
	JMP	,17(PC)
	CMPB	debug+57(SB),$0
	JEQ	,8(PC)
	DATA	.string<>+656(SB)/8,$"\z.\z/%s/l"
	LEAQ	name+-1024(SP),BP
	MOVQ	$.string<>+659(SB),AX
	MOVQ	AX,8(SP)
	MOVQ	thestring+0(SB),AX
	MOVQ	AX,16(SP)
	CALL	,sprint+0(SB)
	JMP	,7(PC)
	DATA	.string<>+664(SB)/8,$"ib\z/usr/"
	LEAQ	name+-1024(SP),BP
	MOVQ	$.string<>+667(SB),AX
	MOVQ	AX,8(SP)
	MOVBLSX	thechar+0(SB),AX
	MOVL	AX,16(SP)
	CALL	,sprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,113(PC)
	INCL	,DX
	CMPL	DX,histfrogp+0(SB)
	JGE	,-3(PC)
	LEAQ	comp+-1280(SP),BP
	MOVL	$256,AX
	MOVL	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-1292(SP)
	MOVQ	histfrog+0(SB)(CX*8),AX
	MOVQ	(AX),AX
	INCQ	,AX
	MOVQ	AX,16(SP)
	CALL	,snprint+0(SB)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,26(PC)
	DATA	.string<>+672(SB)/8,$"%clib\z$O"
	LEAQ	comp+-1280(SP),BP
	MOVQ	$.string<>+678(SB),CX
	MOVQ	CX,8(SP)
	CALL	,strstr+0(SB)
	CMPQ	AX,$0
	JNE	,2(PC)
	JMP	,-7(PC)
	MOVQ	AX,BP
	MOVQ	AX,p+-1288(SP)
	ADDQ	$2,BP
	CALL	,strlen+0(SB)
	MOVQ	p+-1288(SP),BP
	INCL	,AX
	MOVL	AX,.safe+-1308(SP)
	MOVQ	BP,AX
	INCQ	,BP
	ADDQ	$2,AX
	MOVQ	AX,8(SP)
	MOVL	.safe+-1308(SP),AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	MOVQ	p+-1288(SP),AX
	MOVBLSX	thechar+0(SB),CX
	MOVB	CX,(AX)
	JMP	,-26(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,47(PC)
	LEAQ	comp+-1280(SP),BP
	MOVQ	$.string<>+681(SB),CX
	MOVQ	CX,8(SP)
	CALL	,strstr+0(SB)
	CMPQ	AX,$0
	MOVQ	AX,p+-1288(SP)
	JNE	,2(PC)
	JMP	,-8(PC)
	LEAQ	comp+-1280(SP),BP
	CALL	,strlen+0(SB)
	MOVL	AX,.safe+-1308(SP)
	MOVQ	thestring+0(SB),BP
	CALL	,strlen+0(SB)
	ADDL	.safe+-1308(SP),AX
	DECL	,AX
	CMPL	AX,$256
	JLT	,4(PC)
	DATA	.string<>+680(SB)/8,$"\z$M\zlibr"
	DATA	.string<>+688(SB)/8,$"ary comp"
	DATA	.string<>+696(SB)/8,$"onent to"
	MOVQ	$.string<>+684(SB),BP
	CALL	,diag+0(SB)
	RET	,
	MOVQ	thestring+0(SB),BP
	CALL	,strlen+0(SB)
	MOVQ	p+-1288(SP),BP
	ADDQ	BP,AX
	MOVQ	AX,.safe+-1312(SP)
	ADDQ	$2,BP
	CALL	,strlen+0(SB)
	INCL	,AX
	MOVL	AX,.safe+-1316(SP)
	MOVQ	.safe+-1312(SP),BP
	MOVQ	p+-1288(SP),AX
	ADDQ	$2,AX
	MOVQ	AX,8(SP)
	MOVL	.safe+-1316(SP),AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	MOVQ	thestring+0(SB),BP
	CALL	,strlen+0(SB)
	MOVL	AX,.safe+-1308(SP)
	MOVQ	p+-1288(SP),BP
	MOVQ	thestring+0(SB),AX
	MOVQ	AX,8(SP)
	MOVL	.safe+-1308(SP),AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	JMP	,-47(PC)
	LEAQ	name+-1024(SP),BP
	CALL	,strlen+0(SB)
	MOVL	AX,.safe+-1308(SP)
	LEAQ	comp+-1280(SP),BP
	CALL	,strlen+0(SB)
	ADDL	.safe+-1308(SP),AX
	ADDL	$3,AX
	CMPL	AX,$1024
	JLT	,4(PC)
	DATA	.string<>+704(SB)/8,$"o long\zl"
	DATA	.string<>+712(SB)/8,$"ibrary c"
	DATA	.string<>+720(SB)/8,$"omponent"
	DATA	.string<>+728(SB)/8,$" too lon"
	MOVQ	$.string<>+711(SB),BP
	CALL	,diag+0(SB)
	RET	,
	LEAQ	name+-1024(SP),BP
	MOVQ	$.string<>+738(SB),AX
	MOVQ	AX,8(SP)
	CALL	,strcat+0(SB)
	LEAQ	name+-1024(SP),BP
	LEAQ	comp+-1280(SP),AX
	MOVQ	AX,8(SP)
	CALL	,strcat+0(SB)
	MOVL	i+-1292(SP),DX
	JMP	,-113(PC)
	MOVL	$0,CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,15(PC)
	INCL	,CX
	CMPL	CX,libraryp+0(SB)
	JGE	,-3(PC)
	LEAQ	name+-1024(SP),BP
	MOVLQSX	CX,DX
	MOVL	CX,i+-1292(SP)
	MOVQ	library+0(SB)(DX*8),CX
	MOVQ	CX,8(SP)
	CALL	,strcmp+0(SB)
	MOVL	i+-1292(SP),CX
	CMPL	AX,$0
	JNE	,2(PC)
	RET	,
	JMP	,-15(PC)
	CMPL	libraryp+0(SB),$50
	JNE	,6(PC)
	DATA	.string<>+736(SB)/8,$"g\z/\ztoo "
	DATA	.string<>+744(SB)/8,$"many aut"
	DATA	.string<>+752(SB)/8,$"olibs; s"
	DATA	.string<>+760(SB)/8,$"kipping "
	MOVQ	$.string<>+740(SB),BP
	LEAQ	name+-1024(SP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	RET	,
	LEAQ	name+-1024(SP),BP
	CALL	,strlen+0(SB)
	INCL	,AX
	MOVL	AX,.safe+-1308(SP)
	MOVL	.safe+-1308(SP),BP
	CALL	,malloc+0(SB)
	MOVQ	AX,BP
	MOVQ	AX,p+-1288(SP)
	LEAQ	name+-1024(SP),AX
	MOVQ	AX,8(SP)
	CALL	,strcpy+0(SB)
	MOVQ	p+-1288(SP),AX
	MOVLQSX	libraryp+0(SB),CX
	MOVQ	AX,library+0(SB)(CX*8)
	MOVQ	obj+0(FP),BP
	CALL	,strlen+0(SB)
	INCL	,AX
	MOVL	AX,.safe+-1308(SP)
	MOVL	.safe+-1308(SP),BP
	CALL	,malloc+0(SB)
	MOVQ	AX,BP
	MOVQ	AX,p+-1288(SP)
	MOVQ	obj+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,strcpy+0(SB)
	MOVQ	p+-1288(SP),AX
	MOVLQSX	libraryp+0(SB),CX
	MOVQ	AX,libraryobj+0(SB)(CX*8)
	INCL	,libraryp+0(SB)
	RET	,
	TEXT	addhist+0(SB),0,$56
	MOVL	BP,line+0(FP)
	MOVL	$24,BP
	CALL	,malloc+0(SB)
	MOVQ	AX,u+-8(SP)
	MOVL	$48,BP
	CALL	,malloc+0(SB)
	MOVQ	AX,s+-16(SP)
	MOVL	histfrogp+0(SB),BP
	ADDL	BP,BP
	ADDL	$3,BP
	CALL	,malloc+0(SB)
	MOVL	histfrogp+0(SB),DI
	MOVQ	u+-8(SP),DX
	MOVQ	s+-16(SP),SI
	MOVQ	AX,(SI)
	MOVQ	SI,(DX)
	MOVL	type+8(FP),CX
	MOVW	CX,20(DX)
	MOVL	line+0(FP),CX
	MOVL	CX,16(DX)
	MOVQ	curhist+0(SB),CX
	MOVQ	CX,8(DX)
	MOVQ	DX,curhist+0(SB)
	MOVL	$1,BX
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,19(PC)
	INCL	,DX
	CMPL	DX,DI
	JGE	,-3(PC)
	MOVLQSX	DX,CX
	MOVQ	histfrog+0(SB)(CX*8),AX
	MOVQ	24(AX),BP
	MOVLQSX	BX,AX
	MOVQ	(SI),CX
	ADDQ	CX,AX
	MOVL	BP,CX
	SARL	$8,CX
	MOVB	CX,(AX)
	MOVLQSX	BX,AX
	MOVQ	(SI),CX
	ADDQ	CX,AX
	MOVB	BP,1(AX)
	ADDL	$2,BX
	JMP	,-19(PC)
	RET	,
	TEXT	histtoauto+0(SB),0,$16
	MOVQ	curhist+0(SB),BP
	MOVQ	curauto+0(SB),BX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,10(PC)
	MOVQ	BP,curhist+0(SB)
	MOVQ	BP,DX
	CMPQ	BP,$0
	JEQ	,-4(PC)
	MOVQ	8(BP),BP
	MOVQ	BX,8(DX)
	MOVQ	DX,BX
	MOVQ	DX,curauto+0(SB)
	JMP	,-10(PC)
	RET	,
	TEXT	collapsefrog+0(SB),0,$48
	MOVL	histfrogp+0(SB),BX
	MOVQ	BP,s+0(FP)
	MOVL	$1,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,30(PC)
	INCL	,DX
	CMPL	DX,BX
	JGE	,-3(PC)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVQ	histfrog+0(SB)(CX*8),BP
	MOVQ	(BP),BP
	INCQ	,BP
	MOVQ	$.string<>+771(SB),CX
	MOVQ	CX,8(SP)
	CALL	,strcmp+0(SB)
	MOVL	histfrogp+0(SB),BX
	MOVL	i+-4(SP),DX
	CMPL	AX,$0
	JNE	,14(PC)
	MOVLQSX	DX,AX
	LEAQ	histfrog+-8(SB)(AX*8),BP
	MOVLQSX	DX,CX
	LEAQ	histfrog+8(SB)(CX*8),AX
	MOVQ	AX,8(SP)
	MOVL	BX,AX
	SUBL	DX,AX
	SALL	$3,AX
	ADDL	$4294967288,AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	DECL	,histfrogp+0(SB)
	JMP	,32(PC)
	JMP	,-30(PC)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,29(PC)
	INCL	,DX
	CMPL	DX,BX
	JGE	,-3(PC)
	DATA	.string<>+768(SB)/8,$"%s\z..\z.\z"
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVQ	histfrog+0(SB)(CX*8),BP
	MOVQ	(BP),BP
	INCQ	,BP
	MOVQ	$.string<>+774(SB),CX
	MOVQ	CX,8(SP)
	CALL	,strcmp+0(SB)
	MOVL	histfrogp+0(SB),BX
	MOVL	i+-4(SP),DX
	CMPL	AX,$0
	JNE	,13(PC)
	MOVLQSX	DX,AX
	LEAQ	histfrog+0(SB)(AX*8),BP
	MOVLQSX	DX,CX
	LEAQ	histfrog+8(SB)(CX*8),AX
	MOVQ	AX,8(SP)
	MOVL	BX,AX
	SUBL	DX,AX
	SALL	$3,AX
	ADDL	$4294967288,AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	JMP	,10(PC)
	JMP	,-29(PC)
	MOVQ	$histfrog+0(SB),BP
	MOVQ	$histfrog+8(SB),AX
	MOVQ	AX,8(SP)
	MOVL	BX,AX
	SALL	$3,AX
	ADDL	$4294967288,AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	JMP	,1(PC)
	MOVQ	s+0(FP),AX
	MOVLQSX	histfrogp+0(SB),CX
	MOVQ	AX,histfrog+-8(SB)(CX*8)
	RET	,
	TEXT	nopout+0(SB),0,$0
	MOVW	$136,86(BP)
	MOVW	$111,16(BP)
	MOVW	$111,40(BP)
	RET	,
	TEXT	readsome+0(SB),0,$48
	MOVQ	stop+24(FP),DX
	MOVQ	good+16(FP),CX
	MOVL	BP,f+0(FP)
	MOVQ	DX,AX
	SUBQ	CX,AX
	MOVL	AX,n+-4(SP)
	MOVQ	buf+8(FP),BP
	MOVQ	CX,8(SP)
	MOVQ	DX,AX
	SUBQ	CX,AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	MOVL	n+-4(SP),BP
	MOVL	max+32(FP),BX
	MOVLQSX	BP,CX
	MOVQ	buf+8(FP),DX
	LEAQ	(DX)(CX*1),AX
	MOVQ	AX,SI
	MOVL	$8192,DX
	SUBL	BP,DX
	CMPL	DX,BX
	JLE	,2(PC)
	MOVL	BX,DX
	MOVL	f+0(FP),BP
	MOVQ	SI,stop+24(FP)
	MOVQ	SI,8(SP)
	MOVL	DX,16(SP)
	CALL	,read+0(SB)
	CMPL	AX,$0
	JGT	,3(PC)
	MOVQ	$0,AX
	RET	,
	MOVLQSX	AX,CX
	MOVQ	stop+24(FP),DX
	LEAQ	(DX)(CX*1),AX
	RET	,
	RET	,
	TEXT	ldobj+0(SB),0,$568
	MOVL	files$65<>+0(SB),CX
	MOVL	BP,f+0(FP)
	MOVL	CX,AX
	ANDL	$15,AX
	CMPL	AX,$0
	JNE	,15(PC)
	LEAQ	128(NONE)(CX*8),BP
	CALL	,malloc+0(SB)
	MOVQ	AX,BP
	MOVQ	AX,nfilen+-504(SP)
	MOVQ	filen$65<>+0(SB),AX
	MOVQ	AX,8(SP)
	MOVL	files$65<>+0(SB),AX
	SALL	$3,AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	MOVQ	filen$65<>+0(SB),BP
	CALL	,free+0(SB)
	MOVQ	nfilen+-504(SP),AX
	MOVQ	AX,filen$65<>+0(SB)
	MOVQ	pn+16(FP),BP
	CALL	,strdup+0(SB)
	MOVLQSX	files$65<>+0(SB),CX
	INCL	,files$65<>+0(SB)
	MOVQ	filen$65<>+0(SB),BX
	LEAQ	(BX)(CX*8),CX
	MOVQ	AX,(CX)
	MOVQ	$buf+8192(SB),AX
	MOVQ	AX,bsize+-40(SP)
	MOVQ	$buf+8192(SB),AX
	MOVQ	AX,bloc+-32(SP)
	MOVQ	$0,di+-488(SP)
	JMP	,1(PC)
	LEAQ	h+-472(SP),BP
	MOVL	$0,8(SP)
	MOVL	$400,AX
	MOVL	AX,16(SP)
	CALL	,memset+0(SB)
	INCL	,version+0(SB)
	MOVL	$0,histfrogp+0(SB)
	MOVQ	pc+0(SB),AX
	MOVQ	AX,ipc+-8(SP)
	MOVL	$0,skip+-64(SP)
	MOVL	$64,mode+-68(SP)
	JMP	,1(PC)
	CMPL	c+8(FP),$0
	JGT	,2(PC)
	JMP	,21(PC)
	MOVQ	bsize+-40(SP),AX
	SUBQ	bloc+-32(SP),AX
	CMPL	AX,$100
	JGE	,3(PC)
	CMPL	AX,c+8(FP)
	JLT	,2(PC)
	JMP	,18(PC)
	MOVL	f+0(FP),BP
	MOVQ	$buf+8192(SB),CX
	MOVQ	CX,8(SP)
	MOVQ	bloc+-32(SP),CX
	MOVQ	CX,16(SP)
	MOVQ	bsize+-40(SP),CX
	MOVQ	CX,24(SP)
	MOVL	c+8(FP),CX
	MOVL	CX,32(SP)
	CALL	,readsome+0(SB)
	MOVQ	AX,bsize+-40(SP)
	CMPQ	bsize+-40(SP),$0
	JNE	,2(PC)
	JMP	,17(PC)
	MOVQ	$buf+8192(SB),AX
	MOVQ	AX,bloc+-32(SP)
	JMP	,-27(PC)
	MOVQ	bloc+-32(SP),AX
	MOVBLZX	1(AX),AX
	SALL	$8,AX
	MOVQ	bloc+-32(SP),BX
	MOVBLZX	(BX),BX
	ORL	AX,BX
	CMPL	BX,$0
	JLE	,4(PC)
	CMPL	BX,$665
	JGE	,2(PC)
	JMP	,14(PC)
	CMPL	BX,$0
	JGE	,2(PC)
	JMP	,63(PC)
	DATA	.string<>+776(SB)/8,$"%s: opco"
	DATA	.string<>+784(SB)/8,$"de out o"
	DATA	.string<>+792(SB)/8,$"f range "
	MOVQ	$.string<>+776(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	MOVL	BX,o+-56(SP)
	MOVL	BX,16(SP)
	CALL	,diag+0(SB)
	DATA	.string<>+800(SB)/8,$"%d\z\tprob"
	DATA	.string<>+808(SB)/8,$"ably not"
	DATA	.string<>+816(SB)/8,$" a .6 fi"
	MOVQ	$.string<>+803(SB),BP
	CALL	,print+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	o+-56(SP),BX
	CMPL	BX,$132
	JEQ	,5(PC)
	CMPL	BX,$338
	MOVL	BX,o+-56(SP)
	JEQ	,2(PC)
	JMP	,172(PC)
	MOVL	$0,sig+-492(SP)
	CMPL	BX,$338
	JNE	,19(PC)
	MOVQ	bloc+-32(SP),AX
	MOVBLZX	3(AX),AX
	SALL	$8,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	2(CX),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	4(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	5(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVL	AX,sig+-492(SP)
	ADDQ	$4,bloc+-32(SP)
	SUBL	$4,c+8(FP)
	MOVQ	bloc+-32(SP),BP
	ADDQ	$4,BP
	MOVL	$0,8(SP)
	MOVQ	bsize+-40(SP),CX
	MOVQ	bloc+-32(SP),DX
	SUBQ	DX,CX
	ADDQ	$-4,CX
	MOVL	CX,16(SP)
	CALL	,memchr+0(SB)
	MOVQ	bloc+-32(SP),BX
	CMPQ	AX,$0
	MOVQ	AX,stop+-48(SP)
	JNE	,37(PC)
	MOVL	f+0(FP),BP
	MOVQ	$buf+8192(SB),CX
	MOVQ	CX,8(SP)
	MOVQ	BX,16(SP)
	MOVQ	bsize+-40(SP),CX
	MOVQ	CX,24(SP)
	MOVL	c+8(FP),CX
	MOVL	CX,32(SP)
	CALL	,readsome+0(SB)
	MOVQ	AX,DX
	CMPQ	AX,$0
	JNE	,2(PC)
	JMP	,666(PC)
	MOVQ	$buf+8192(SB),AX
	MOVQ	AX,BP
	ADDQ	$4,BP
	MOVL	$0,8(SP)
	MOVQ	DX,CX
	MOVQ	DX,bsize+-40(SP)
	MOVQ	AX,bloc+-32(SP)
	SUBQ	AX,CX
	ADDQ	$-4,CX
	MOVL	CX,16(SP)
	CALL	,memchr+0(SB)
	MOVQ	bloc+-32(SP),BX
	CMPQ	AX,$0
	MOVQ	AX,stop+-48(SP)
	JNE	,9(PC)
	DATA	.string<>+824(SB)/8,$"le\n\z%s: "
	DATA	.string<>+832(SB)/8,$"name too"
	MOVL	$2,BP
	MOVQ	$.string<>+828(SB),AX
	MOVQ	AX,8(SP)
	MOVQ	pn+16(FP),AX
	MOVQ	AX,16(SP)
	CALL	,fprint+0(SB)
	CALL	,errorexit+0(SB)
	MOVQ	bloc+-32(SP),BX
	MOVBLZX	2(BX),AX
	MOVL	AX,CX
	MOVBLZX	3(BX),AX
	MOVL	AX,o+-56(SP)
	ADDQ	$4,BX
	SUBL	$4,c+8(FP)
	MOVL	$0,DX
	CMPL	CX,$114
	MOVL	CX,v+-52(SP)
	JNE	,2(PC)
	MOVL	version+0(SB),DX
	MOVQ	BX,BP
	MOVQ	BX,bloc+-32(SP)
	MOVL	DX,r+-60(SP)
	MOVL	DX,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	stop+-48(SP),DX
	MOVL	sig+-492(SP),SI
	MOVQ	AX,BX
	MOVQ	DX,AX
	MOVQ	bloc+-32(SP),CX
	SUBQ	CX,AX
	INCQ	,AX
	SUBL	AX,c+8(FP)
	MOVQ	DX,AX
	INCQ	,AX
	MOVQ	AX,bloc+-32(SP)
	CMPB	debug+83(SB),$0
	JEQ	,3(PC)
	CMPL	r+-60(SP),$0
	JEQ	,2(PC)
	JMP	,2(PC)
	MOVL	$1729,SI
	CMPL	SI,$0
	JEQ	,29(PC)
	MOVL	32(BX),AX
	CMPL	AX,$0
	JEQ	,4(PC)
	MOVL	32(BX),AX
	CMPL	AX,SI
	JNE	,2(PC)
	JMP	,18(PC)
	DATA	.string<>+840(SB)/8,$" long\n\zi"
	DATA	.string<>+848(SB)/8,$"ncompati"
	DATA	.string<>+856(SB)/8,$"ble type"
	DATA	.string<>+864(SB)/8,$" signatu"
	DATA	.string<>+872(SB)/8,$"res %lux"
	DATA	.string<>+880(SB)/8,$"(%s) and"
	DATA	.string<>+888(SB)/8,$" %lux(%s"
	DATA	.string<>+896(SB)/8,$") for %s"
	MOVQ	$.string<>+847(SB),BP
	MOVL	32(BX),AX
	MOVL	AX,8(SP)
	MOVWQZX	18(BX),CX
	MOVQ	filen$65<>+0(SB),DX
	MOVQ	(DX)(CX*8),AX
	MOVQ	AX,16(SP)
	MOVL	SI,sig+-492(SP)
	MOVL	SI,24(SP)
	MOVQ	pn+16(FP),AX
	MOVQ	AX,32(SP)
	MOVQ	BX,s+-480(SP)
	MOVQ	(BX),AX
	MOVQ	AX,40(SP)
	CALL	,diag+0(SB)
	MOVL	sig+-492(SP),SI
	MOVQ	s+-480(SP),BX
	MOVL	SI,32(BX)
	MOVL	files$65<>+0(SB),CX
	DECL	,CX
	MOVW	CX,18(BX)
	CMPB	debug+87(SB),$0
	JEQ	,7(PC)
	DATA	.string<>+904(SB)/8,$"\z\tANAME\t"
	MOVQ	$.string<>+905(SB),BP
	MOVQ	BX,s+-480(SP)
	MOVQ	(BX),AX
	MOVQ	AX,8(SP)
	CALL	,print+0(SB)
	MOVQ	s+-480(SP),BX
	MOVLQSX	o+-56(SP),CX
	MOVQ	BX,h+-472(SP)(CX*8)
	CMPL	v+-52(SP),$113
	JEQ	,4(PC)
	CMPL	v+-52(SP),$114
	JEQ	,2(PC)
	JMP	,4(PC)
	MOVWLSX	8(BX),AX
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,2(PC)
	MOVW	$5,8(BX)
	CMPL	v+-52(SP),$121
	JNE	,16(PC)
	MOVWLSX	8(BX),AX
	CMPL	AX,$6
	JEQ	,5(PC)
	INCL	,histgen+0(SB)
	MOVW	$6,8(BX)
	MOVLQSX	histgen+0(SB),CX
	MOVQ	CX,24(BX)
	CMPL	histfrogp+0(SB),$20
	JGE	,5(PC)
	MOVLQSX	histfrogp+0(SB),CX
	MOVQ	BX,histfrog+0(SB)(CX*8)
	INCL	,histfrogp+0(SB)
	JMP	,3(PC)
	MOVQ	BX,BP
	CALL	,collapsefrog+0(SB)
	JMP	,-228(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,6(PC)
	CMPL	nhunk+0(SB),$96
	JGE	,-2(PC)
	CALL	,gethunk+0(SB)
	MOVL	o+-56(SP),BX
	JMP	,-6(PC)
	MOVQ	hunk+0(SB),DX
	SUBL	$96,nhunk+0(SB)
	ADDQ	$96,hunk+0(SB)
	MOVW	BX,86(DX)
	MOVQ	bloc+-32(SP),AX
	MOVBLZX	3(AX),AX
	SALL	$8,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	2(CX),CX
	ORL	AX,CX
	MOVL	CX,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	4(CX),CX
	SALL	$16,CX
	ORL	CX,AX
	MOVQ	bloc+-32(SP),CX
	MOVBLZX	5(CX),CX
	SALL	$24,CX
	ORL	CX,AX
	MOVL	AX,80(DX)
	MOVB	$2,85(DX)
	MOVL	mode+-68(SP),CX
	MOVB	CX,89(DX)
	MOVQ	bloc+-32(SP),BP
	ADDQ	$6,BP
	MOVQ	DX,p+-16(SP)
	MOVQ	DX,8(SP)
	LEAQ	h+-472(SP),CX
	MOVQ	CX,16(SP)
	CALL	,zaddr+0(SB)
	ADDL	$6,AX
	MOVLQSX	AX,CX
	MOVL	AX,r+-60(SP)
	MOVQ	bloc+-32(SP),DX
	LEAQ	(DX)(CX*1),BP
	MOVQ	p+-16(SP),CX
	ADDQ	$24,CX
	MOVQ	CX,8(SP)
	LEAQ	h+-472(SP),CX
	MOVQ	CX,16(SP)
	CALL	,zaddr+0(SB)
	MOVL	r+-60(SP),CX
	MOVQ	curtext+0(SB),SI
	MOVQ	p+-16(SP),BX
	ADDL	AX,CX
	MOVLQSX	CX,AX
	ADDQ	AX,bloc+-32(SP)
	SUBL	CX,c+8(FP)
	CMPB	debug+87(SB),$0
	JEQ	,6(PC)
	DATA	.string<>+912(SB)/8,$"%s\n\z%P\n\z"
	MOVQ	$.string<>+916(SB),BP
	MOVQ	BX,8(SP)
	CALL	,print+0(SB)
	MOVQ	curtext+0(SB),SI
	MOVQ	p+-16(SP),BX
	JMP	,375(PC)
	JMP	,476(PC)
	MOVQ	24(BX),AX
	CMPQ	AX,$-1
	JNE	,5(PC)
	MOVQ	pn+16(FP),BP
	CALL	,addlib+0(SB)
	MOVL	$0,histfrogp+0(SB)
	JMP	,-300(PC)
	MOVL	80(BX),BP
	MOVL	$121,AX
	MOVL	AX,8(SP)
	CALL	,addhist+0(SB)
	MOVQ	p+-16(SP),CX
	MOVQ	24(CX),AX
	CMPQ	AX,$0
	JEQ	,5(PC)
	MOVQ	24(CX),BP
	MOVL	$122,AX
	MOVL	AX,8(SP)
	CALL	,addhist+0(SB)
	MOVL	$0,histfrogp+0(SB)
	JMP	,-314(PC)
	CALL	,histtoauto+0(SB)
	MOVQ	curtext+0(SB),CX
	CMPQ	CX,$0
	JEQ	,4(PC)
	MOVQ	CX,AX
	MOVQ	curauto+0(SB),CX
	MOVQ	CX,32(AX)
	MOVQ	$0,curauto+0(SB)
	MOVQ	$0,curtext+0(SB)
	CMPL	c+8(FP),$0
	JEQ	,2(PC)
	JMP	,-338(PC)
	RET	,
	MOVQ	8(BX),DX
	MOVWLSX	8(DX),AX
	CMPL	AX,$0
	JEQ	,5(PC)
	MOVWLSX	8(DX),AX
	CMPL	AX,$5
	JEQ	,2(PC)
	JMP	,3(PC)
	MOVW	$3,8(DX)
	MOVQ	$0,24(DX)
	MOVWLSX	8(DX),AX
	CMPL	AX,$3
	JEQ	,19(PC)
	DATA	.string<>+920(SB)/8,$"%s: rede"
	DATA	.string<>+928(SB)/8,$"finition"
	DATA	.string<>+936(SB)/8,$": %s in "
	MOVQ	$.string<>+920(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	MOVQ	DX,s+-480(SP)
	MOVQ	(DX),AX
	MOVQ	AX,16(SP)
	CMPQ	SI,$0
	JEQ	,4(PC)
	MOVQ	8(SI),AX
	MOVQ	(AX),AX
	JMP	,2(PC)
	MOVQ	noname+0(SB),AX
	MOVQ	AX,24(SP)
	CALL	,diag+0(SB)
	MOVQ	s+-480(SP),DX
	MOVQ	p+-16(SP),BX
	MOVW	$3,8(DX)
	MOVQ	$0,24(DX)
	MOVQ	24(BX),AX
	MOVQ	24(DX),CX
	CMPQ	AX,CX
	JLE	,3(PC)
	MOVQ	24(BX),CX
	MOVQ	CX,24(DX)
	JMP	,-365(PC)
	MOVQ	32(BX),AX
	CMPQ	AX,$0
	JNE	,5(PC)
	DATA	.string<>+944(SB)/8,$"%s\zDYNT "
	DATA	.string<>+952(SB)/8,$"without "
	DATA	.string<>+960(SB)/8,$"a sym\n%P"
	MOVQ	$.string<>+947(SB),BP
	MOVQ	BX,8(SP)
	CALL	,diag+0(SB)
	JMP	,-79(PC)
	MOVQ	32(BX),DX
	MOVB	$4,19(BX)
	MOVQ	DX,di+-488(SP)
	MOVWLSX	8(DX),AX
	CMPL	AX,$5
	JNE	,17(PC)
	CMPB	debug+122(SB),$0
	JEQ	,11(PC)
	DATA	.string<>+968(SB)/8,$"\z%P set "
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+969(SB),AX
	MOVQ	AX,8(SP)
	MOVQ	BX,16(SP)
	MOVL	dtype+0(SB),AX
	MOVL	AX,24(SP)
	CALL	,Bprint+0(SB)
	MOVQ	di+-488(SP),DX
	MOVQ	curtext+0(SB),SI
	MOVQ	p+-16(SP),BX
	MOVW	$7,8(DX)
	MOVLQSX	dtype+0(SB),CX
	MOVQ	CX,24(DX)
	ADDL	$4,dtype+0(SB)
	MOVQ	8(BX),AX
	CMPQ	AX,$0
	JNE	,2(PC)
	JMP	,-105(PC)
	MOVQ	24(DX),CX
	MOVQ	CX,(BX)
	MOVQ	8(BX),AX
	MOVW	$2,8(AX)
	CMPQ	SI,$0
	JNE	,5(PC)
	DATA	.string<>+976(SB)/8,$"to %d\n\zD"
	DATA	.string<>+984(SB)/8,$"YNT not "
	DATA	.string<>+992(SB)/8,$"in text:"
	MOVQ	$.string<>+983(SB),BP
	MOVQ	BX,8(SP)
	CALL	,diag+0(SB)
	JMP	,-115(PC)
	MOVQ	8(SI),CX
	MOVQ	CX,32(BX)
	MOVW	$120,40(BX)
	MOVB	$113,42(BX)
	JMP	,19(PC)
	MOVQ	8(BX),AX
	CMPQ	AX,$0
	JNE	,5(PC)
	DATA	.string<>+1000(SB)/8,$" %P\zINIT"
	DATA	.string<>+1008(SB)/8,$" without"
	DATA	.string<>+1016(SB)/8,$" a sym\n%"
	MOVQ	$.string<>+1004(SB),BP
	MOVQ	BX,8(SP)
	CALL	,diag+0(SB)
	JMP	,-127(PC)
	CMPQ	di+-488(SP),$0
	JNE	,5(PC)
	DATA	.string<>+1024(SB)/8,$"P\zINIT w"
	DATA	.string<>+1032(SB)/8,$"ithout p"
	DATA	.string<>+1040(SB)/8,$"revious "
	DATA	.string<>+1048(SB)/8,$"DYNT\n%P\z"
	MOVQ	$.string<>+1026(SB),BP
	MOVQ	BX,8(SP)
	CALL	,diag+0(SB)
	JMP	,-133(PC)
	MOVQ	di+-488(SP),CX
	MOVQ	24(CX),CX
	MOVQ	CX,(BX)
	MOVQ	8(BX),AX
	MOVW	$2,8(AX)
	JMP	,1(PC)
	JMP	,1(PC)
	CMPQ	edatap+0(SB),$0
	JNE	,3(PC)
	MOVQ	BX,datap+0(SB)
	JMP	,3(PC)
	MOVQ	edatap+0(SB),AX
	MOVQ	BX,56(AX)
	MOVQ	BX,edatap+0(SB)
	MOVQ	$0,56(BX)
	JMP	,-442(PC)
	DATA	.string<>+1056(SB)/8,$"%s: GOK "
	DATA	.string<>+1064(SB)/8,$"opcode i"
	MOVQ	$.string<>+1056(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	CMPQ	SI,$0
	JEQ	,4(PC)
	MOVQ	8(SI),AX
	MOVQ	(AX),AX
	JMP	,2(PC)
	MOVQ	noname+0(SB),AX
	MOVQ	AX,16(SP)
	CALL	,diag+0(SB)
	INCQ	,pc+0(SB)
	JMP	,-455(PC)
	CMPQ	SI,$0
	JEQ	,7(PC)
	CALL	,histtoauto+0(SB)
	MOVQ	p+-16(SP),BX
	MOVQ	curtext+0(SB),AX
	MOVQ	curauto+0(SB),CX
	MOVQ	CX,32(AX)
	MOVQ	$0,curauto+0(SB)
	MOVL	$0,skip+-64(SP)
	MOVQ	BX,curtext+0(SB)
	MOVQ	8(BX),CX
	CMPQ	CX,$0
	MOVQ	CX,s+-480(SP)
	JNE	,9(PC)
	DATA	.string<>+1072(SB)/8,$"n %s\z%s:"
	DATA	.string<>+1080(SB)/8,$" no TEXT"
	DATA	.string<>+1088(SB)/8,$" symbol:"
	MOVQ	$.string<>+1077(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	MOVQ	BX,16(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVQ	s+-480(SP),CX
	MOVQ	p+-16(SP),BX
	MOVWLSX	8(CX),AX
	CMPL	AX,$0
	JEQ	,4(PC)
	MOVWLSX	8(CX),AX
	CMPL	AX,$5
	JNE	,2(PC)
	JMP	,16(PC)
	MOVBLSX	19(BX),AX
	ANDL	$2,AX
	CMPL	AX,$0
	JEQ	,3(PC)
	MOVL	$1,skip+-64(SP)
	JMP	,53(PC)
	DATA	.string<>+1096(SB)/8,$" %P\z%s: "
	DATA	.string<>+1104(SB)/8,$"redefini"
	DATA	.string<>+1112(SB)/8,$"tion: %s"
	MOVQ	$.string<>+1100(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	MOVQ	(CX),AX
	MOVQ	AX,16(SP)
	MOVQ	BX,24(SP)
	CALL	,diag+0(SB)
	MOVQ	s+-480(SP),CX
	MOVQ	p+-16(SP),BX
	MOVW	$1,8(CX)
	MOVQ	CX,AX
	MOVQ	pc+0(SB),CX
	MOVQ	CX,24(AX)
	MOVQ	lastp+0(SB),AX
	MOVQ	BX,56(AX)
	MOVQ	BX,lastp+0(SB)
	MOVQ	pc+0(SB),CX
	MOVQ	CX,72(BX)
	INCQ	,pc+0(SB)
	CMPQ	textp+0(SB),$0
	JNE	,4(PC)
	MOVQ	BX,textp+0(SB)
	MOVQ	BX,etextp+0(SB)
	JMP	,-514(PC)
	MOVQ	etextp+0(SB),AX
	MOVQ	BX,64(AX)
	MOVQ	BX,etextp+0(SB)
	JMP	,-518(PC)
	MOVWLSX	16(BX),AX
	CMPL	AX,$117
	JEQ	,5(PC)
	MOVWLSX	16(BX),AX
	CMPL	AX,$234
	JEQ	,2(PC)
	JMP	,15(PC)
	JMP	,6(PC)
	JMP	,13(PC)
	MOVQ	(BX),AX
	MOVL	AX,mode+-68(SP)
	JMP	,-3(PC)
	JMP	,-4(PC)
	MOVQ	(BX),AX
	CMPL	AX,$16
	JEQ	,-6(PC)
	CMPL	AX,$32
	JEQ	,-8(PC)
	CMPL	AX,$64
	JEQ	,-10(PC)
	JMP	,-12(PC)
	JMP	,-540(PC)
	CMPL	skip+-64(SP),$0
	JEQ	,2(PC)
	JMP	,51(PC)
	MOVWLSX	16(BX),AX
	CMPL	AX,$118
	JNE	,48(PC)
	DATA	.string<>+1120(SB)/8,$"\n%P\z$%lu"
	MOVQ	BX,BP
	CALL	,ieeedtof+0(SB)
	MOVL	AX,.safe+-516(SP)
	MOVQ	$literal+0(SB),BP
	MOVQ	$.string<>+1124(SB),AX
	MOVQ	AX,8(SP)
	MOVL	.safe+-516(SP),AX
	MOVL	AX,16(SP)
	CALL	,sprint+0(SB)
	MOVQ	$literal+0(SB),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	p+-16(SP),BX
	MOVQ	AX,SI
	MOVWLSX	8(AX),AX
	CMPL	AX,$0
	JNE	,28(PC)
	MOVW	$3,8(SI)
	MOVQ	SI,s+-480(SP)
	MOVQ	$4,24(SI)
	CALL	,prg+0(SB)
	MOVQ	edatap+0(SB),DI
	MOVQ	s+-480(SP),SI
	MOVQ	p+-16(SP),BX
	MOVQ	AX,BP
	MOVW	$45,86(AX)
	MOVL	80(BX),CX
	MOVL	CX,80(AX)
	MOVW	$113,16(AX)
	MOVQ	SI,8(AX)
	MOVB	$4,19(AX)
	MOVQ	(BX),AX
	MOVQ	AX,24(BP)
	MOVQ	8(BX),AX
	MOVQ	AX,32(BP)
	MOVQ	16(BX),AX
	MOVQ	AX,40(BP)
	CMPQ	DI,$0
	JNE	,3(PC)
	MOVQ	BP,datap+0(SB)
	JMP	,2(PC)
	MOVQ	BP,56(DI)
	MOVQ	BP,edatap+0(SB)
	MOVQ	$0,56(BP)
	MOVW	$113,16(BX)
	MOVQ	SI,8(BX)
	MOVQ	$0,(BX)
	JMP	,3(PC)
	CMPL	skip+-64(SP),$0
	JEQ	,2(PC)
	JMP	,50(PC)
	MOVWLSX	16(BX),AX
	CMPL	AX,$118
	JNE	,47(PC)
	DATA	.string<>+1128(SB)/8,$"x\z$%lux."
	MOVQ	$literal+0(SB),BP
	MOVQ	$.string<>+1130(SB),AX
	MOVQ	AX,8(SP)
	MOVL	(BX),AX
	MOVL	AX,16(SP)
	MOVL	4(BX),AX
	MOVL	AX,24(SP)
	CALL	,sprint+0(SB)
	MOVQ	$literal+0(SB),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	p+-16(SP),BX
	MOVQ	AX,SI
	MOVWLSX	8(AX),AX
	CMPL	AX,$0
	JNE	,28(PC)
	MOVW	$3,8(SI)
	MOVQ	SI,s+-480(SP)
	MOVQ	$8,24(SI)
	CALL	,prg+0(SB)
	MOVQ	edatap+0(SB),DI
	MOVQ	s+-480(SP),SI
	MOVQ	p+-16(SP),BX
	MOVQ	AX,BP
	MOVW	$45,86(AX)
	MOVL	80(BX),CX
	MOVL	CX,80(AX)
	MOVW	$113,16(AX)
	MOVQ	SI,8(AX)
	MOVB	$8,19(AX)
	MOVQ	(BX),AX
	MOVQ	AX,24(BP)
	MOVQ	8(BX),AX
	MOVQ	AX,32(BP)
	MOVQ	16(BX),AX
	MOVQ	AX,40(BP)
	CMPQ	DI,$0
	JNE	,3(PC)
	MOVQ	BP,datap+0(SB)
	JMP	,2(PC)
	MOVQ	BP,56(DI)
	MOVQ	BP,edatap+0(SB)
	MOVQ	$0,56(BP)
	MOVW	$113,16(BX)
	MOVQ	SI,8(BX)
	MOVQ	$0,(BX)
	JMP	,1(PC)
	JMP	,1(PC)
	CMPL	skip+-64(SP),$0
	JEQ	,4(PC)
	MOVQ	BX,BP
	CALL	,nopout+0(SB)
	MOVQ	p+-16(SP),BX
	MOVWLSX	40(BX),AX
	CMPL	AX,$112
	JNE	,3(PC)
	MOVQ	ipc+-8(SP),CX
	ADDQ	CX,24(BX)
	MOVQ	lastp+0(SB),AX
	MOVQ	BX,56(AX)
	MOVQ	BX,lastp+0(SB)
	MOVQ	pc+0(SB),CX
	MOVQ	CX,72(BX)
	INCQ	,pc+0(SB)
	JMP	,-665(PC)
	JMP	,-373(PC)
	MOVWLSX	86(BX),AX
	CMPL	AX,$290
	JGT	,51(PC)
	JEQ	,-75(PC)
	CMPL	AX,$258
	JGT	,27(PC)
	JEQ	,-132(PC)
	CMPL	AX,$240
	JGT	,15(PC)
	JEQ	,-81(PC)
	CMPL	AX,$55
	JGT	,7(PC)
	JEQ	,-236(PC)
	CMPL	AX,$45
	JEQ	,-248(PC)
	CMPL	AX,$54
	JEQ	,-355(PC)
	JMP	,-35(PC)
	CMPL	AX,$56
	JEQ	,-392(PC)
	CMPL	AX,$226
	JEQ	,-232(PC)
	JMP	,-40(PC)
	CMPL	AX,$242
	JEQ	,-150(PC)
	CMPL	AX,$254
	JEQ	,-98(PC)
	CMPL	AX,$255
	JEQ	,-100(PC)
	CMPL	AX,$257
	JEQ	,-156(PC)
	JMP	,-49(PC)
	CMPL	AX,$279
	JGT	,11(PC)
	JEQ	,-160(PC)
	CMPL	AX,$269
	JEQ	,-162(PC)
	CMPL	AX,$270
	JEQ	,-110(PC)
	CMPL	AX,$274
	JEQ	,-166(PC)
	CMPL	AX,$275
	JEQ	,-114(PC)
	JMP	,-61(PC)
	CMPL	AX,$280
	JEQ	,-117(PC)
	CMPL	AX,$284
	JEQ	,-173(PC)
	CMPL	AX,$285
	JEQ	,-121(PC)
	CMPL	AX,$289
	JEQ	,-177(PC)
	JMP	,-70(PC)
	CMPL	AX,$497
	JGT	,27(PC)
	JEQ	,-181(PC)
	CMPL	AX,$460
	JGT	,15(PC)
	JEQ	,-130(PC)
	CMPL	AX,$335
	JGT	,7(PC)
	JEQ	,-413(PC)
	CMPL	AX,$294
	JEQ	,-189(PC)
	CMPL	AX,$295
	JEQ	,-137(PC)
	JMP	,-84(PC)
	CMPL	AX,$336
	JEQ	,-369(PC)
	CMPL	AX,$337
	JEQ	,-323(PC)
	JMP	,-89(PC)
	CMPL	AX,$461
	JEQ	,-199(PC)
	CMPL	AX,$470
	JEQ	,-147(PC)
	CMPL	AX,$471
	JEQ	,-203(PC)
	CMPL	AX,$496
	JEQ	,-151(PC)
	JMP	,-98(PC)
	CMPL	AX,$646
	JGT	,11(PC)
	JEQ	,-155(PC)
	CMPL	AX,$531
	JEQ	,-157(PC)
	CMPL	AX,$532
	JEQ	,-213(PC)
	CMPL	AX,$537
	JEQ	,-161(PC)
	CMPL	AX,$538
	JEQ	,-217(PC)
	JMP	,-110(PC)
	CMPL	AX,$647
	JEQ	,-220(PC)
	CMPL	AX,$648
	JEQ	,-168(PC)
	CMPL	AX,$649
	JEQ	,-224(PC)
	CMPL	AX,$664
	JEQ	,-248(PC)
	JMP	,-119(PC)
	JMP	,-769(PC)
	JMP	,1(PC)
	DATA	.string<>+1136(SB)/8,$"%lux\ztru"
	DATA	.string<>+1144(SB)/8,$"ncated o"
	DATA	.string<>+1152(SB)/8,$"bject fi"
	MOVQ	$.string<>+1141(SB),BP
	MOVQ	pn+16(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	RET	,
	TEXT	lookup+0(SB),0,$72
	MOVQ	BP,SI
	MOVL	v+8(FP),CX
	MOVQ	BP,BX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,12(PC)
	INCQ	,BX
	MOVBLSX	(BX),AX
	MOVL	AX,DX
	CMPL	AX,$0
	JEQ	,-5(PC)
	MOVL	CX,AX
	ADDL	DX,AX
	ADDL	CX,AX
	ADDL	CX,AX
	MOVL	AX,CX
	JMP	,-12(PC)
	MOVQ	BX,AX
	SUBQ	SI,AX
	MOVQ	SI,symb+0(FP)
	INCL	,AX
	MOVL	AX,l+-24(SP)
	CMPL	CX,$0
	JGE	,2(PC)
	NOTL	,CX
	MOVLQSX	CX,AX
	CDQ	,
	MOVL	$10007,CX
	IDIVL	CX,
	MOVLQSX	DX,CX
	MOVL	DX,h+-20(SP)
	MOVQ	hash+0(SB)(CX*8),CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,20(PC)
	MOVQ	40(CX),CX
	CMPQ	CX,$0
	JEQ	,-3(PC)
	MOVWLSX	10(CX),AX
	CMPL	AX,v+8(FP)
	JNE	,13(PC)
	MOVQ	CX,s+-8(SP)
	MOVQ	(CX),BP
	MOVQ	SI,8(SP)
	MOVL	l+-24(SP),CX
	MOVL	CX,16(SP)
	CALL	,memcmp+0(SB)
	MOVQ	symb+0(FP),SI
	MOVQ	s+-8(SP),CX
	CMPL	AX,$0
	JNE	,3(PC)
	MOVQ	CX,AX
	RET	,
	JMP	,-20(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,5(PC)
	CMPL	nhunk+0(SB),$48
	JGE	,-2(PC)
	CALL	,gethunk+0(SB)
	JMP	,-5(PC)
	MOVQ	hunk+0(SB),AX
	MOVQ	AX,s+-8(SP)
	SUBL	$48,nhunk+0(SB)
	ADDQ	$48,hunk+0(SB)
	MOVL	l+-24(SP),BP
	INCL	,BP
	CALL	,malloc+0(SB)
	MOVQ	s+-8(SP),DX
	MOVQ	AX,(DX)
	MOVQ	(DX),BP
	MOVQ	symb+0(FP),AX
	MOVQ	AX,8(SP)
	MOVL	l+-24(SP),AX
	MOVL	AX,16(SP)
	CALL	,memmove+0(SB)
	MOVL	h+-20(SP),BP
	MOVQ	s+-8(SP),AX
	MOVLQSX	BP,DX
	MOVQ	hash+0(SB)(DX*8),CX
	MOVQ	CX,40(AX)
	MOVW	$0,8(AX)
	MOVL	v+8(FP),CX
	MOVW	CX,10(AX)
	MOVQ	$0,24(AX)
	MOVL	$0,32(AX)
	MOVLQSX	BP,CX
	MOVQ	AX,hash+0(SB)(CX*8)
	INCL	,nsymbol+0(SB)
	RET	,
	RET	,
	TEXT	prg+0(SB),0,$16
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,5(PC)
	CMPL	nhunk+0(SB),$96
	JGE	,-2(PC)
	CALL	,gethunk+0(SB)
	JMP	,-5(PC)
	MOVQ	hunk+0(SB),AX
	SUBL	$96,nhunk+0(SB)
	ADDQ	$96,hunk+0(SB)
	MOVQ	AX,DI
	LEAQ	zprg+0(SB),SI
	MOVL	$24,CX
	CLD	,
	REP	,
	MOVSL	,
	RET	,
	RET	,
	TEXT	copyp+0(SB),0,$16
	MOVQ	BP,q+0(FP)
	CALL	,prg+0(SB)
	MOVQ	AX,DI
	MOVQ	q+0(FP),SI
	MOVL	$24,CX
	CLD	,
	REP	,
	MOVSL	,
	RET	,
	RET	,
	TEXT	appendp+0(SB),0,$16
	MOVQ	BP,q+0(FP)
	CALL	,prg+0(SB)
	MOVQ	q+0(FP),BX
	MOVQ	56(BX),CX
	MOVQ	CX,56(AX)
	MOVQ	AX,56(BX)
	MOVL	80(BX),CX
	MOVL	CX,80(AX)
	MOVBLSX	89(BX),CX
	MOVB	CX,89(AX)
	RET	,
	RET	,
	TEXT	gethunk+0(SB),0,$40
	MOVL	thunk+0(SB),DX
	MOVL	$100000,CX
	CMPL	DX,$500000
	JLT	,5(PC)
	MOVL	$500000,CX
	CMPL	DX,$2500000
	JLT	,2(PC)
	MOVL	$2500000,CX
	MOVL	CX,BP
	MOVL	CX,nh+-12(SP)
	CALL	,mysbrk+0(SB)
	MOVQ	AX,CX
	CMPQ	AX,$-1
	MOVQ	AX,h+-8(SP)
	JNE	,5(PC)
	DATA	.string<>+1160(SB)/8,$"le: %s\zo"
	DATA	.string<>+1168(SB)/8,$"ut of me"
	MOVQ	$.string<>+1167(SB),BP
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVQ	h+-8(SP),CX
	MOVQ	CX,hunk+0(SB)
	MOVL	nh+-12(SP),AX
	MOVL	AX,nhunk+0(SB)
	MOVL	nh+-12(SP),AX
	ADDL	AX,thunk+0(SB)
	RET	,
	TEXT	doprof1+0(SB),0,$80
	CMPB	debug+118(SB),$0
	JEQ	,9(PC)
	DATA	.string<>+1176(SB)/8,$"mory\z%5."
	DATA	.string<>+1184(SB)/8,$"2f profi"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-48(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1181(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-48(SP),X0
	MOVSD	X0,16(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	DATA	.string<>+1192(SB)/8,$"le 1\n\z__"
	MOVQ	$.string<>+1198(SB),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	AX,s+-8(SP)
	MOVL	$1,n+-12(SP)
	MOVQ	firstp+0(SB),AX
	MOVQ	56(AX),DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,54(PC)
	MOVQ	56(DX),DX
	CMPQ	DX,$0
	JEQ	,-3(PC)
	MOVQ	DX,p+-24(SP)
	MOVWLSX	86(DX),AX
	CMPL	AX,$226
	JNE	,46(PC)
	CALL	,prg+0(SB)
	MOVQ	p+-24(SP),BP
	MOVQ	AX,BX
	MOVL	80(BP),CX
	MOVL	CX,80(AX)
	MOVQ	datap+0(SB),CX
	MOVQ	CX,56(AX)
	MOVQ	AX,datap+0(SB)
	MOVW	$45,86(AX)
	MOVW	$113,16(AX)
	MOVL	n+-12(SP),AX
	SALL	$2,AX
	MOVQ	AX,(BX)
	MOVQ	s+-8(SP),CX
	MOVQ	CX,8(BX)
	MOVB	$4,19(BX)
	MOVQ	(BP),AX
	MOVQ	AX,24(BX)
	MOVQ	8(BP),AX
	MOVQ	AX,32(BX)
	MOVQ	16(BP),AX
	MOVQ	AX,40(BX)
	MOVW	$117,40(BX)
	CALL	,prg+0(SB)
	MOVQ	p+-24(SP),BX
	MOVQ	AX,DX
	MOVL	80(BX),CX
	MOVL	CX,80(AX)
	MOVQ	72(BX),CX
	MOVQ	CX,72(AX)
	MOVQ	56(BX),CX
	MOVQ	CX,56(AX)
	MOVQ	AX,56(BX)
	MOVW	$9,86(AX)
	MOVW	$117,16(AX)
	MOVQ	$1,(AX)
	MOVW	$113,40(AX)
	MOVQ	s+-8(SP),CX
	MOVQ	CX,32(AX)
	MOVL	n+-12(SP),AX
	SALL	$2,AX
	ADDL	$4,AX
	MOVQ	AX,24(DX)
	ADDL	$2,n+-12(SP)
	JMP	,-53(PC)
	JMP	,-54(PC)
	CALL	,prg+0(SB)
	MOVL	n+-12(SP),BP
	MOVQ	s+-8(SP),BX
	MOVL	$0,80(AX)
	MOVQ	datap+0(SB),CX
	MOVQ	CX,56(AX)
	MOVQ	AX,datap+0(SB)
	MOVW	$45,86(AX)
	MOVW	$113,16(AX)
	MOVQ	BX,8(AX)
	MOVB	$4,19(AX)
	MOVW	$117,40(AX)
	MOVLQSX	BP,CX
	MOVQ	CX,24(AX)
	MOVW	$3,8(BX)
	MOVL	BP,AX
	SALL	$2,AX
	MOVQ	AX,24(BX)
	RET	,
	TEXT	doprof2+0(SB),0,$96
	CMPB	debug+118(SB),$0
	JEQ	,9(PC)
	DATA	.string<>+1200(SB)/8,$"mcount\z%"
	DATA	.string<>+1208(SB)/8,$"5.2f pro"
	DATA	.string<>+1216(SB)/8,$"file 2\n\z"
	CALL	,cputime+0(SB)
	MOVSD	X0,.safe+-64(SP)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1207(SB),AX
	MOVQ	AX,8(SP)
	MOVSD	.safe+-64(SP),X0
	MOVSD	X0,16(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	DATA	.string<>+1224(SB)/8,$"_profin\z"
	MOVQ	$.string<>+1224(SB),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	AX,s2+-8(SP)
	DATA	.string<>+1232(SB)/8,$"_profout"
	MOVQ	$.string<>+1232(SB),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVQ	firstp+0(SB),BP
	MOVQ	s2+-8(SP),BX
	MOVQ	AX,DX
	MOVWLSX	8(BX),AX
	CMPL	AX,$1
	JNE	,6(PC)
	MOVQ	DX,s4+-16(SP)
	MOVWLSX	8(DX),AX
	CMPL	AX,$1
	JNE	,2(PC)
	JMP	,4(PC)
	DATA	.string<>+1240(SB)/8,$"\z_profin"
	DATA	.string<>+1248(SB)/8,$"/_profou"
	DATA	.string<>+1256(SB)/8,$"t not de"
	MOVQ	$.string<>+1241(SB),BP
	CALL	,diag+0(SB)
	RET	,
	MOVQ	$0,ps2+-40(SP)
	MOVQ	$0,ps4+-48(SP)
	MOVQ	BP,CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,18(PC)
	MOVQ	56(CX),CX
	CMPQ	CX,$0
	JEQ	,-3(PC)
	MOVWLSX	86(CX),AX
	CMPL	AX,$226
	JNE	,11(PC)
	MOVQ	8(CX),AX
	CMPQ	AX,BX
	JNE	,3(PC)
	MOVB	$1,19(CX)
	MOVQ	CX,ps2+-40(SP)
	MOVQ	8(CX),AX
	CMPQ	AX,DX
	JNE	,3(PC)
	MOVB	$1,19(CX)
	MOVQ	CX,ps4+-48(SP)
	JMP	,-18(PC)
	MOVQ	BP,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,90(PC)
	MOVQ	56(DX),DX
	CMPQ	DX,$0
	JEQ	,-3(PC)
	MOVWLSX	86(DX),AX
	CMPL	AX,$226
	JNE	,38(PC)
	MOVQ	DX,curtext+0(SB)
	MOVQ	DX,p+-24(SP)
	MOVBLSX	19(DX),AX
	ANDL	$1,AX
	CMPL	AX,$0
	JEQ	,15(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,11(PC)
	MOVQ	56(DX),CX
	CMPQ	CX,$0
	JNE	,2(PC)
	JMP	,-4(PC)
	MOVWLSX	86(CX),AX
	CMPL	AX,$226
	JNE	,2(PC)
	JMP	,-8(PC)
	MOVQ	CX,DX
	JMP	,-11(PC)
	JMP	,-27(PC)
	CALL	,prg+0(SB)
	MOVQ	p+-24(SP),BX
	MOVQ	AX,DX
	MOVL	80(BX),CX
	MOVL	CX,80(AX)
	MOVQ	72(BX),CX
	MOVQ	CX,72(AX)
	MOVQ	56(BX),CX
	MOVQ	CX,56(AX)
	MOVQ	AX,56(BX)
	MOVW	$31,86(AX)
	MOVW	$112,40(AX)
	MOVQ	ps2+-40(SP),CX
	MOVQ	CX,64(AX)
	MOVQ	s2+-8(SP),CX
	MOVQ	CX,32(AX)
	JMP	,-44(PC)
	MOVQ	DX,p+-24(SP)
	MOVWLSX	86(DX),AX
	CMPL	AX,$169
	JNE	,42(PC)
	CALL	,prg+0(SB)
	MOVQ	p+-24(SP),BX
	MOVQ	AX,BP
	MOVW	$169,86(AX)
	MOVQ	(BX),AX
	MOVQ	AX,(BP)
	MOVQ	8(BX),AX
	MOVQ	AX,8(BP)
	MOVQ	16(BX),AX
	MOVQ	AX,16(BP)
	MOVQ	24(BX),AX
	MOVQ	AX,24(BP)
	MOVQ	32(BX),AX
	MOVQ	AX,32(BP)
	MOVQ	40(BX),AX
	MOVQ	AX,40(BP)
	MOVQ	56(BX),CX
	MOVQ	CX,56(BP)
	MOVQ	BP,56(BX)
	MOVW	$31,86(BX)
	LEAQ	zprg+0(SB),DX
	MOVQ	(DX),AX
	MOVQ	AX,(BX)
	MOVQ	8(DX),AX
	MOVQ	AX,8(BX)
	MOVQ	16(DX),AX
	MOVQ	AX,16(BX)
	LEAQ	zprg+24(SB),DX
	MOVQ	(DX),AX
	MOVQ	AX,24(BX)
	MOVQ	8(DX),AX
	MOVQ	AX,32(BX)
	MOVQ	16(DX),AX
	MOVQ	AX,40(BX)
	MOVW	$112,40(BX)
	MOVQ	ps4+-48(SP),CX
	MOVQ	CX,64(BX)
	MOVQ	s4+-16(SP),CX
	MOVQ	CX,32(BX)
	MOVQ	BP,DX
	JMP	,-89(PC)
	JMP	,-90(PC)
	RET	,
	TEXT	nuxiinit+0(SB),0,$48
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,37(PC)
	INCL	,DX
	CMPL	DX,$4
	JGE	,-3(PC)
	MOVL	$67305985,BP
	MOVL	DX,CX
	MOVL	DX,i+-4(SP)
	INCL	,CX
	MOVL	CX,8(SP)
	CALL	,find1+0(SB)
	MOVL	i+-4(SP),DX
	MOVL	AX,BX
	CMPL	DX,$2
	JGE	,3(PC)
	MOVLQSX	DX,CX
	MOVB	BX,inuxi2+0(SB)(CX*1)
	CMPL	DX,$1
	JGE	,3(PC)
	MOVLQSX	DX,CX
	MOVB	BX,inuxi1+0(SB)(CX*1)
	MOVLQSX	DX,CX
	MOVB	BX,inuxi4+0(SB)(CX*1)
	MOVLQSX	DX,CX
	MOVB	BX,inuxi8+0(SB)(CX*1)
	MOVL	BX,AX
	ADDL	$4,AX
	MOVLQSX	DX,CX
	MOVB	AX,inuxi8+4(SB)(CX*1)
	MOVLQSX	DX,CX
	MOVB	BX,fnuxi4+0(SB)(CX*1)
	MOVLQSX	DX,CX
	MOVB	BX,fnuxi8+0(SB)(CX*1)
	MOVL	BX,AX
	ADDL	$4,AX
	MOVLQSX	DX,CX
	MOVB	AX,fnuxi8+4(SB)(CX*1)
	JMP	,-37(PC)
	CMPB	debug+118(SB),$0
	JEQ	,131(PC)
	DATA	.string<>+1264(SB)/8,$"fined\zin"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1270(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$1
	JGE	,-3(PC)
	DATA	.string<>+1272(SB)/8,$"uxi = \z%"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1279(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	inuxi1+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1282(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$2
	JGE	,-3(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1284(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	inuxi2+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	DATA	.string<>+1280(SB)/8,$"d\z \z%d\z "
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1287(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$4
	JGE	,-3(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1289(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	inuxi4+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1292(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$8
	JGE	,-3(PC)
	DATA	.string<>+1288(SB)/8,$"\z%d\z \z%d"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1294(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	inuxi8+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	DATA	.string<>+1296(SB)/8,$"\z\nfnuxi "
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1297(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$4
	JGE	,-3(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1307(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	fnuxi4+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	DATA	.string<>+1304(SB)/8,$"= \z%d\z \z"
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1310(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	INCL	,DX
	CMPL	DX,$8
	JGE	,-3(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1312(SB),AX
	MOVQ	AX,8(SP)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVBLZX	fnuxi8+0(SB)(CX*1),AX
	MOVL	AX,16(SP)
	CALL	,Bprint+0(SB)
	MOVL	i+-4(SP),DX
	JMP	,-14(PC)
	MOVQ	$bso+0(SB),BP
	MOVQ	$.string<>+1315(SB),AX
	MOVQ	AX,8(SP)
	CALL	,Bprint+0(SB)
	MOVQ	$bso+0(SB),BP
	CALL	,Bflush+0(SB)
	RET	,
	TEXT	find1+0(SB),0,$24
	MOVL	c+8(FP),BX
	MOVL	BP,l+0(FP)
	LEAQ	l+0(FP),AX
	MOVQ	AX,DX
	MOVL	$0,CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,12(PC)
	INCL	,CX
	CMPL	CX,$4
	JGE	,-3(PC)
	MOVQ	DX,AX
	INCQ	,DX
	MOVBLSX	(AX),AX
	CMPL	AX,BX
	JNE	,3(PC)
	MOVL	CX,AX
	RET	,
	JMP	,-12(PC)
	MOVL	$0,AX
	RET	,
	RET	,
	TEXT	find2+0(SB),0,$24
	MOVL	c+8(FP),BX
	MOVL	BP,l+0(FP)
	LEAQ	l+0(FP),AX
	MOVQ	AX,CX
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,21(PC)
	ADDL	$2,DX
	CMPL	DX,$4
	JGE	,-3(PC)
	MOVWLSX	(CX),AX
	SARL	$8,AX
	ANDL	$255,AX
	CMPL	AX,BX
	JNE	,3(PC)
	MOVL	DX,AX
	RET	,
	MOVQ	CX,AX
	ADDQ	$2,CX
	MOVWLSX	(AX),AX
	ANDL	$255,AX
	CMPL	AX,BX
	JNE	,4(PC)
	MOVL	DX,AX
	INCL	,AX
	RET	,
	JMP	,-21(PC)
	MOVL	$0,AX
	RET	,
	RET	,
	TEXT	ieeedtof+0(SB),0,$32
	MOVQ	BP,DX
	MOVL	4(BP),AX
	CMPL	AX,$0
	JNE	,3(PC)
	MOVL	$0,AX
	RET	,
	MOVL	4(BP),AX
	SARL	$20,AX
	ANDL	$2047,AX
	MOVL	AX,BX
	SUBL	$1022,BX
	MOVL	4(BP),AX
	ANDL	$1048575,AX
	SALL	$3,AX
	MOVL	AX,CX
	MOVL	(BP),AX
	SARL	$29,AX
	ANDL	$7,AX
	ORL	AX,CX
	MOVL	CX,v+-8(SP)
	MOVQ	BP,e+0(FP)
	MOVL	(BP),AX
	SARL	$28,AX
	ANDL	$1,AX
	CMPL	AX,$0
	JEQ	,13(PC)
	INCL	,CX
	MOVL	CX,AX
	MOVL	CX,v+-8(SP)
	ANDL	$8388608,AX
	CMPL	AX,$0
	JEQ	,7(PC)
	MOVL	CX,AX
	ANDL	$8388607,AX
	SARL	$1,AX
	MOVL	AX,CX
	MOVL	AX,v+-8(SP)
	INCL	,BX
	CMPL	BX,$-126
	MOVL	BX,exp+-4(SP)
	JLE	,4(PC)
	CMPL	BX,$130
	JGE	,2(PC)
	JMP	,6(PC)
	DATA	.string<>+1312(SB)/8,$"%d\z\n\zdou"
	DATA	.string<>+1320(SB)/8,$"ble fp t"
	DATA	.string<>+1328(SB)/8,$"o single"
	DATA	.string<>+1336(SB)/8,$" fp over"
	MOVQ	$.string<>+1317(SB),BP
	CALL	,diag+0(SB)
	MOVL	exp+-4(SP),BX
	MOVQ	e+0(FP),DX
	MOVL	v+-8(SP),CX
	MOVL	BX,AX
	ADDL	$126,AX
	ANDL	$255,AX
	SALL	$23,AX
	ORL	AX,CX
	MOVL	4(DX),AX
	ANDL	$2147483648,AX
	ORL	AX,CX
	MOVL	CX,AX
	RET	,
	RET	,
	TEXT	ieeedtod+0(SB),0,$56
	MOVQ	BP,CX
	MOVL	4(BP),AX
	ANDL	$-2147483648,AX
	CMPL	AX,$0
	JEQ	,12(PC)
	MOVL	4(CX),AX
	ANDL	$2147483647,AX
	MOVL	AX,e+-4(SP)
	MOVL	(CX),AX
	MOVL	AX,e+-8(SP)
	LEAQ	e+-8(SP),BP
	CALL	,ieeedtod+0(SB)
	MOVSD	X0,X1
	XORPD	X0,X0
	SUBSD	X1,X0
	RET	,
	MOVL	(BP),AX
	CMPL	AX,$0
	JNE	,4(PC)
	MOVL	4(CX),AX
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,3(PC)
	XORPD	X0,X0
	RET	,
	MOVL	(CX),AX
	ANDL	$65535,AX
	CVTSL2SD	AX,X0
	DIVSD	$(6.55360000000000000e+04),X0
	MOVSD	X0,X5
	MOVL	(CX),AX
	SARL	$16,AX
	ANDL	$65535,AX
	CVTSL2SD	AX,X0
	ADDSD	X5,X0
	DIVSD	$(6.55360000000000000e+04),X0
	MOVSD	X0,X5
	MOVL	4(CX),AX
	ANDL	$1048575,AX
	ORL	$1048576,AX
	CVTSL2SD	AX,X0
	ADDSD	X5,X0
	DIVSD	$(2.09715200000000000e+06),X0
	MOVL	4(CX),AX
	SARL	$20,AX
	ANDL	$2047,AX
	MOVL	AX,CX
	SUBL	$1022,CX
	MOVSD	X0,(SP)
	MOVL	CX,8(SP)
	CALL	,ldexp+0(SB)
	RET	,
	RET	,
	TEXT	undefsym+0(SB),0,$40
	MOVQ	BP,DX
	MOVL	imports+0(SB),CX
	MOVL	CX,n+-4(SP)
	MOVQ	BP,s+0(FP)
	MOVQ	24(BP),AX
	CMPQ	AX,$0
	JEQ	,5(PC)
	DATA	.string<>+1344(SB)/8,$"flow\zval"
	DATA	.string<>+1352(SB)/8,$"ue != 0 "
	DATA	.string<>+1360(SB)/8,$"on SXREF"
	MOVQ	$.string<>+1349(SB),BP
	CALL	,diag+0(SB)
	MOVQ	s+0(FP),DX
	MOVL	n+-4(SP),CX
	CMPL	CX,$1024
	JLT	,6(PC)
	DATA	.string<>+1368(SB)/8,$"\zimport "
	DATA	.string<>+1376(SB)/8,$"index %d"
	DATA	.string<>+1384(SB)/8,$" out of "
	MOVQ	$.string<>+1369(SB),BP
	MOVL	CX,8(SP)
	CALL	,diag+0(SB)
	MOVQ	s+0(FP),DX
	MOVL	n+-4(SP),CX
	MOVL	CX,AX
	SALL	$22,AX
	MOVLQSX	AX,AX
	MOVQ	AX,24(DX)
	MOVW	$8,8(DX)
	INCL	,imports+0(SB)
	RET	,
	TEXT	zerosig+0(SB),0,$40
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVL	$0,32(AX)
	RET	,
	TEXT	readundefs+0(SB),0,$856
	CMPQ	BP,$0
	JNE	,2(PC)
	RET	,
	MOVQ	BP,f+0(FP)
	MOVL	$0,8(SP)
	CALL	,Bopen+0(SB)
	MOVQ	AX,b+-24(SP)
	CMPQ	b+-24(SP),$0
	JNE	,6(PC)
	DATA	.string<>+1392(SB)/8,$"range\zco"
	DATA	.string<>+1400(SB)/8,$"uld not "
	DATA	.string<>+1408(SB)/8,$"open %s:"
	MOVQ	$.string<>+1398(SB),BP
	MOVQ	f+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,69(PC)
	MOVQ	b+-24(SP),BP
	MOVL	$10,CX
	MOVL	CX,8(SP)
	CALL	,Brdline+0(SB)
	MOVQ	b+-24(SP),CX
	MOVQ	AX,l+-32(SP)
	CMPQ	AX,$0
	JEQ	,-8(PC)
	MOVQ	CX,BP
	CALL	,Blinelen+0(SB)
	MOVL	AX,CX
	CMPL	AX,$256
	MOVL	AX,n+-8(SP)
	JLT	,7(PC)
	DATA	.string<>+1416(SB)/8,$" %r\z%s: "
	DATA	.string<>+1424(SB)/8,$"line too"
	MOVQ	$.string<>+1420(SB),BP
	MOVQ	f+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	n+-8(SP),CX
	LEAQ	buf+-288(SP),BP
	MOVQ	l+-32(SP),AX
	MOVQ	AX,8(SP)
	MOVL	CX,16(SP)
	CALL	,memmove+0(SB)
	MOVLQSX	n+-8(SP),AX
	MOVB	$0,buf+-289(SP)(AX*1)
	DATA	.string<>+1432(SB)/8,$" long\z \t"
	LEAQ	buf+-288(SP),BP
	LEAQ	fields+-800(SP),CX
	MOVQ	CX,8(SP)
	MOVL	$64,CX
	MOVL	CX,16(SP)
	MOVL	$1,CX
	MOVL	CX,24(SP)
	MOVQ	$.string<>+1438(SB),CX
	MOVQ	CX,32(SP)
	CALL	,getfields+0(SB)
	MOVL	AX,n+-8(SP)
	CMPL	n+-8(SP),$64
	JNE	,6(PC)
	DATA	.string<>+1440(SB)/8,$"\015\n\z%s: b"
	DATA	.string<>+1448(SB)/8,$"ad forma"
	MOVQ	$.string<>+1443(SB),BP
	MOVQ	f+0(FP),AX
	MOVQ	AX,8(SP)
	CALL	,diag+0(SB)
	CALL	,errorexit+0(SB)
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,19(PC)
	INCL	,DX
	CMPL	DX,n+-8(SP)
	JGE	,-3(PC)
	MOVLQSX	DX,CX
	MOVL	DX,i+-4(SP)
	MOVQ	fields+-800(SP)(CX*8),BP
	MOVL	$0,8(SP)
	CALL	,lookup+0(SB)
	MOVL	t+8(FP),BX
	MOVL	i+-4(SP),DX
	MOVW	$5,8(AX)
	MOVB	BX,16(AX)
	CMPL	BX,$9
	JNE	,3(PC)
	INCL	,nimports+0(SB)
	JMP	,2(PC)
	INCL	,nexports+0(SB)
	JMP	,-19(PC)
	JMP	,-69(PC)
	MOVQ	CX,BP
	CALL	,Bterm+0(SB)
	RET	,
	DATA	.string<>+1456(SB)/8,$"t\z\z\z\z\z\z\z"
	GLOBL	paramspace+0(SB),$8
	GLOBL	hash+0(SB),$80056
	GLOBL	literal+0(SB),$32
	GLOBL	cout+0(SB),$4
	GLOBL	noname+0(SB),$8
	GLOBL	thestring+0(SB),$8
	GLOBL	curp+0(SB),$8
	GLOBL	inuxi1+0(SB),$1
	GLOBL	inuxi2+0(SB),$2
	GLOBL	inuxi4+0(SB),$4
	GLOBL	inuxi8+0(SB),$8
	GLOBL	thechar+0(SB),$1
	GLOBL	regrex+0(SB),$448
	GLOBL	doexp+0(SB),$4
	GLOBL	hunk+0(SB),$8
	GLOBL	reloca+0(SB),$8
	GLOBL	cbc+0(SB),$4
	GLOBL	cbp+0(SB),$8
	GLOBL	and+0(SB),$30
	GLOBL	curauto+0(SB),$8
	GLOBL	dlm+0(SB),$4
	GLOBL	buf+0(SB),$16384
	GLOBL	bso+0(SB),$8272
	GLOBL	etextp+0(SB),$8
	GLOBL	nsymbol+0(SB),$4
	GLOBL	INITDAT+0(SB),$8
	GLOBL	textp+0(SB),$8
	GLOBL	HEADR+0(SB),$4
	GLOBL	thunk+0(SB),$4
	GLOBL	symname+0(SB),$10
	GLOBL	curhist+0(SB),$8
	GLOBL	version+0(SB),$4
	GLOBL	undefp+0(SB),$96
	GLOBL	reg+0(SB),$444
	GLOBL	fnuxi4+0(SB),$4
	GLOBL	fnuxi8+0(SB),$8
	GLOBL	histgen+0(SB),$4
	GLOBL	pc+0(SB),$8
	GLOBL	symlist+0(SB),$8
	GLOBL	EXPTAB+0(SB),$8
	GLOBL	histfrog+0(SB),$160
	GLOBL	dtype+0(SB),$4
	GLOBL	histfrogp+0(SB),$4
	GLOBL	INITRND+0(SB),$4
	GLOBL	nexports+0(SB),$4
	GLOBL	spsize+0(SB),$4
	GLOBL	lastp+0(SB),$8
	GLOBL	bsssize+0(SB),$4
	GLOBL	.string<>+0(SB),$1464
	GLOBL	INITTEXT+0(SB),$8
	GLOBL	symsize+0(SB),$4
	GLOBL	exports+0(SB),$4
	GLOBL	zprg+0(SB),$96
	GLOBL	filen$65<>+0(SB),$8
	GLOBL	rexptr+0(SB),$8
	GLOBL	curtext+0(SB),$8
	GLOBL	libraryp+0(SB),$4
	GLOBL	textsize+0(SB),$8
	GLOBL	nerrors+0(SB),$4
	GLOBL	libraryobj+0(SB),$400
	GLOBL	files$65<>+0(SB),$4
	GLOBL	nimports+0(SB),$4
	GLOBL	andptr+0(SB),$8
	GLOBL	datsize+0(SB),$8
	GLOBL	INITENTRY+0(SB),$8
	GLOBL	xrefresolv+0(SB),$4
	GLOBL	edatap+0(SB),$8
	GLOBL	imports+0(SB),$4
	GLOBL	library+0(SB),$400
	GLOBL	lcsize+0(SB),$4
	GLOBL	debug+0(SB),$128
	GLOBL	datap+0(SB),$8
	GLOBL	nhunk+0(SB),$4
	GLOBL	ycover+0(SB),$4225
	GLOBL	pcstr+0(SB),$8
	GLOBL	firstp+0(SB),$8
	GLOBL	outfile+0(SB),$8
	GLOBL	HEADTYPE+0(SB),$4
	END	,
